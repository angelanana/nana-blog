{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/images/Vue2vsVue3.png","path":"images/Vue2vsVue3.png","modified":0,"renderable":0},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/umami-view.js","path":"js/umami-view.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/me.md","hash":"e3c1e45c589bd88e71a11a104d07699cd72773de","modified":1743490950491},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1735896086836},{"_id":"source/_posts/kaoyan.md","hash":"fc8912dc8ab1b65be6746d3a94af7992133921e9","modified":1743490950490},{"_id":"source/about/index.md","hash":"d3d07fe26520db479b53f984fe01491c3c80135a","modified":1735895849145},{"_id":"source/_posts/Vue3组合式API最新实践.md","hash":"db26d82a421076dfd79546b17cf9f65adf280502","modified":1743586248169},{"_id":"source/images/Vue2vsVue3.png","hash":"47f726af11a214a46d298a35b881c2c94ef1d243","modified":1743566087674},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1743490950517},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1743490950502},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1743490950491},{"_id":"themes/fluid/package.json","hash":"7746460fc2eba7439b494c46aa9b5ded81370819","modified":1743490950509},{"_id":"themes/fluid/_config.yml","hash":"836ce25ad4311b49b7755b5edd70bd23a211d399","modified":1743587955588},{"_id":"themes/fluid/README.md","hash":"ff9b0e1fb9dba665af2f1e4a577f8cb9e840464b","modified":1743490950491},{"_id":"themes/fluid/hexo-theme-fluid/README.md","hash":"ff9b0e1fb9dba665af2f1e4a577f8cb9e840464b","modified":1743490950492},{"_id":"themes/fluid/hexo-theme-fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1743490950492},{"_id":"themes/fluid/hexo-theme-fluid/_config.yml","hash":"e62d2e25cae57e8469e3f48c9d17be1fd284a969","modified":1743490950492},{"_id":"themes/fluid/hexo-theme-fluid/package.json","hash":"7746460fc2eba7439b494c46aa9b5ded81370819","modified":1743490950497},{"_id":"themes/fluid/languages/de.yml","hash":"58dccef1d98b472dc4e6f4693c2297b0c9c5afba","modified":1743490950505},{"_id":"themes/fluid/languages/eo.yml","hash":"7c1a0c9f6186b6643b19d3980f055329bdb4efa4","modified":1743490950505},{"_id":"themes/fluid/languages/es.yml","hash":"026ddf1a49bf8ddfef6ed86ab4d6af143c1dd95f","modified":1743490950505},{"_id":"themes/fluid/languages/ru.yml","hash":"93818f8bf07195fb1ebffbb5210e531b0e3a6ec4","modified":1743490950505},{"_id":"themes/fluid/languages/en.yml","hash":"9c580471257f5a32bee701a059a45ea96755dcdc","modified":1743490950505},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"a60847136709bb95586a98d9d67b50390a8d2c96","modified":1743490950505},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"e1043de394f6dcf5c0647adcfdefe60637f78426","modified":1743490950505},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"51c2b4d64c6992a39bfd2586a1bdf5fbbbdf0175","modified":1743490950505},{"_id":"themes/fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1743490950505},{"_id":"themes/fluid/languages/ja.yml","hash":"550b95d3614a64592f02666938d235e9f11e449e","modified":1743490950505},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1743490950508},{"_id":"themes/fluid/layout/about.ejs","hash":"052e9fc19c753f53fdc083c7fb098e3668880140","modified":1743490950508},{"_id":"themes/fluid/layout/index.ejs","hash":"33c3317cdcee062789de2336dd8d0cc7f86d3650","modified":1743490950508},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1743490950508},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1743490950509},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1743490950509},{"_id":"themes/fluid/layout/post.ejs","hash":"9bf0d357a607a282f3b9cb04525a4df0cc2a8b76","modified":1743490950509},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1743490950508},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1743490950509},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1743490950509},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1743490950509},{"_id":"themes/fluid/hexo-theme-fluid/languages/de.yml","hash":"58dccef1d98b472dc4e6f4693c2297b0c9c5afba","modified":1743490950492},{"_id":"themes/fluid/hexo-theme-fluid/languages/en.yml","hash":"9c580471257f5a32bee701a059a45ea96755dcdc","modified":1743490950492},{"_id":"themes/fluid/hexo-theme-fluid/languages/eo.yml","hash":"7c1a0c9f6186b6643b19d3980f055329bdb4efa4","modified":1743490950492},{"_id":"themes/fluid/hexo-theme-fluid/languages/es.yml","hash":"026ddf1a49bf8ddfef6ed86ab4d6af143c1dd95f","modified":1743490950492},{"_id":"themes/fluid/hexo-theme-fluid/languages/zh-CN.yml","hash":"a60847136709bb95586a98d9d67b50390a8d2c96","modified":1743490950492},{"_id":"themes/fluid/hexo-theme-fluid/languages/ru.yml","hash":"93818f8bf07195fb1ebffbb5210e531b0e3a6ec4","modified":1743490950492},{"_id":"themes/fluid/hexo-theme-fluid/languages/zh-HK.yml","hash":"51c2b4d64c6992a39bfd2586a1bdf5fbbbdf0175","modified":1743490950492},{"_id":"themes/fluid/hexo-theme-fluid/languages/ja.yml","hash":"550b95d3614a64592f02666938d235e9f11e449e","modified":1743490950492},{"_id":"themes/fluid/hexo-theme-fluid/languages/zh-TW.yml","hash":"e1043de394f6dcf5c0647adcfdefe60637f78426","modified":1743490950492},{"_id":"themes/fluid/hexo-theme-fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1743490950492},{"_id":"themes/fluid/hexo-theme-fluid/layout/about.ejs","hash":"052e9fc19c753f53fdc083c7fb098e3668880140","modified":1743490950496},{"_id":"themes/fluid/hexo-theme-fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1743490950496},{"_id":"themes/fluid/hexo-theme-fluid/layout/index.ejs","hash":"33c3317cdcee062789de2336dd8d0cc7f86d3650","modified":1743490950496},{"_id":"themes/fluid/hexo-theme-fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1743490950496},{"_id":"themes/fluid/hexo-theme-fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1743490950496},{"_id":"themes/fluid/hexo-theme-fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1743490950496},{"_id":"themes/fluid/hexo-theme-fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1743490950496},{"_id":"themes/fluid/hexo-theme-fluid/layout/post.ejs","hash":"9bf0d357a607a282f3b9cb04525a4df0cc2a8b76","modified":1743490950496},{"_id":"themes/fluid/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1743490950497},{"_id":"themes/fluid/hexo-theme-fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1743490950496},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"96cd2cfdae1b31b7cfc40f1ff651156876a022a2","modified":1743588223676},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1743490950505},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1743490950505},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1743490950505},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"1dadb118d580280524ed0a5f69bd34d234a92276","modified":1743490950506},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"67be642f99482c07904474f410cfbc2f99003288","modified":1743490950507},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"40c8b0852873032e7aaef3f68e8ea08706cdef13","modified":1743490950506},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1743490950507},{"_id":"themes/fluid/hexo-theme-fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1743490950496},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1743490950507},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1743490950509},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1743490950510},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1743490950510},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1743490950508},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"82bb06686158ebe160a631c79f156cd4fde35656","modified":1743490950510},{"_id":"themes/fluid/scripts/generators/index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":1743490950510},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":1743490950510},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":1743490950510},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1743490950511},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1743490950511},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":1743490950511},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1743490950512},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1743490950512},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"966689d7c5e4320008285395fbaa2751f6209be5","modified":1743490950512},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1743490950512},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1743490950511},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1743490950511},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1743490950512},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4d48c424e47ff9a17a563167ea5f480890267adf","modified":1743490950512},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"6eaf53cf4bfc756a65bda18184cf8998a12c861d","modified":1743490950512},{"_id":"themes/fluid/scripts/tags/fold.js","hash":"73e4fd12ce3e47981479391ed354b7d9d3279f70","modified":1743490950512},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1743490950513},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1743490950513},{"_id":"themes/fluid/scripts/tags/note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":1743490950513},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1743490950513},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1743490950513},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1743490950513},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1743490950513},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1743490950507},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1743490950508},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1743490950514},{"_id":"themes/fluid/scripts/utils/crypto.js","hash":"ae4ad8a188ef5b3fa6818b01629fc962b3de8551","modified":1743490950513},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1743490950517},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1743490950517},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1743490950517},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1743490950517},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1743490950519},{"_id":"themes/fluid/source/js/events.js","hash":"6869811f67e4c3de3edfa4b08464bb242b97a402","modified":1743490950519},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1743490950519},{"_id":"themes/fluid/source/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1743490950519},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1743490950519},{"_id":"themes/fluid/source/js/color-schema.js","hash":"1ef88c881b9f942deadde3d890387b94c617342a","modified":1743490950519},{"_id":"themes/fluid/source/js/umami-view.js","hash":"33c4b3883fa747604074ad3921606eeeaeb50716","modified":1743490950519},{"_id":"themes/fluid/source/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1743490950519},{"_id":"themes/fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1743490950519},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1743490950517},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1743490950519},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1743490950518},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1743490950518},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1743490950493},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1743490950493},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1743490950493},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1743490950518},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/css.ejs","hash":"1dadb118d580280524ed0a5f69bd34d234a92276","modified":1743490950494},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/head.ejs","hash":"67be642f99482c07904474f410cfbc2f99003288","modified":1743490950494},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1743490950493},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"40c8b0852873032e7aaef3f68e8ea08706cdef13","modified":1743490950494},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1743490950494},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1743490950494},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1743490950496},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1743490950494},{"_id":"themes/fluid/hexo-theme-fluid/scripts/generators/local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":1743490950498},{"_id":"themes/fluid/hexo-theme-fluid/scripts/generators/index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":1743490950498},{"_id":"themes/fluid/hexo-theme-fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1743490950497},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1743490950496},{"_id":"themes/fluid/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1743490950497},{"_id":"themes/fluid/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1743490950497},{"_id":"themes/fluid/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"82bb06686158ebe160a631c79f156cd4fde35656","modified":1743490950497},{"_id":"themes/fluid/hexo-theme-fluid/scripts/generators/pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":1743490950498},{"_id":"themes/fluid/hexo-theme-fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1743490950498},{"_id":"themes/fluid/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":1743490950498},{"_id":"themes/fluid/hexo-theme-fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1743490950498},{"_id":"themes/fluid/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1743490950498},{"_id":"themes/fluid/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1743490950498},{"_id":"themes/fluid/hexo-theme-fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1743490950498},{"_id":"themes/fluid/hexo-theme-fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1743490950498},{"_id":"themes/fluid/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1743490950498},{"_id":"themes/fluid/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"4d48c424e47ff9a17a563167ea5f480890267adf","modified":1743490950498},{"_id":"themes/fluid/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1743490950498},{"_id":"themes/fluid/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"6eaf53cf4bfc756a65bda18184cf8998a12c861d","modified":1743490950499},{"_id":"themes/fluid/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1743490950499},{"_id":"themes/fluid/hexo-theme-fluid/scripts/helpers/utils.js","hash":"966689d7c5e4320008285395fbaa2751f6209be5","modified":1743490950498},{"_id":"themes/fluid/hexo-theme-fluid/scripts/tags/fold.js","hash":"73e4fd12ce3e47981479391ed354b7d9d3279f70","modified":1743490950499},{"_id":"themes/fluid/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1743490950499},{"_id":"themes/fluid/hexo-theme-fluid/scripts/tags/note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":1743490950499},{"_id":"themes/fluid/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1743490950499},{"_id":"themes/fluid/hexo-theme-fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1743490950499},{"_id":"themes/fluid/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1743490950499},{"_id":"themes/fluid/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1743490950499},{"_id":"themes/fluid/hexo-theme-fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1743490950499},{"_id":"themes/fluid/hexo-theme-fluid/scripts/utils/crypto.js","hash":"ae4ad8a188ef5b3fa6818b01629fc962b3de8551","modified":1743490950499},{"_id":"themes/fluid/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1743490950502},{"_id":"themes/fluid/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1743490950503},{"_id":"themes/fluid/hexo-theme-fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1743490950503},{"_id":"themes/fluid/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1743490950503},{"_id":"themes/fluid/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1743490950502},{"_id":"themes/fluid/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1743490950504},{"_id":"themes/fluid/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1743490950504},{"_id":"themes/fluid/hexo-theme-fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1743490950503},{"_id":"themes/fluid/hexo-theme-fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1743490950504},{"_id":"themes/fluid/hexo-theme-fluid/source/js/color-schema.js","hash":"1ef88c881b9f942deadde3d890387b94c617342a","modified":1743490950504},{"_id":"themes/fluid/hexo-theme-fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1743490950504},{"_id":"themes/fluid/hexo-theme-fluid/source/js/events.js","hash":"6869811f67e4c3de3edfa4b08464bb242b97a402","modified":1743490950504},{"_id":"themes/fluid/hexo-theme-fluid/source/js/umami-view.js","hash":"33c4b3883fa747604074ad3921606eeeaeb50716","modified":1743490950504},{"_id":"themes/fluid/hexo-theme-fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1743490950504},{"_id":"themes/fluid/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1743490950505},{"_id":"themes/fluid/hexo-theme-fluid/source/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1743490950504},{"_id":"themes/fluid/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1743490950504},{"_id":"themes/fluid/hexo-theme-fluid/source/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1743490950504},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1743490950506},{"_id":"themes/fluid/layout/_partials/comments/discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":1743490950506},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1743490950506},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1743490950506},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1743490950506},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1743490950506},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1743490950506},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1743490950506},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"3d08c73b77e412d2f06a24d9344565fc7dbc76f8","modified":1743490950506},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1743490950506},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1743490950506},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1743490950507},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"37d750428772d7c71ba36ce0c2540780d90fadea","modified":1743490950507},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1743490950506},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"954a29b58d72647d20450da270b5d8fb2e0824f5","modified":1743490950507},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":1743490950506},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"e6dcbf1c2f56314d56bb46b50aca86ff68cacebd","modified":1743490950507},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1743490950507},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1743490950507},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1743490950507},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1743490950507},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":1743490950507},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1743490950507},{"_id":"themes/fluid/layout/_partials/plugins/moment.ejs","hash":"4ff3fb1b60ccc95a0af3bbdbd0757fedefc088b5","modified":1743490950507},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":1743490950507},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"cbfa32c5f5973133afd043853b24f8200455cb2d","modified":1743490950508},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":1743490950508},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1743490950508},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1743490950508},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":1743490950508},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"54dd479dbb440126e4ddd9d902229db5afaaae98","modified":1743490950508},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1743490950508},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1743490950508},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1743490950509},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"c19ac8050b82c3676b0332a56099ccfcc36d9d52","modified":1743490950509},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"bd8376e1cf7892dc2daa58f2f443574be559fdbf","modified":1743490950509},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1743490950508},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"a5fe1deccb73b5f578797dbb11038efc15f63ce8","modified":1743490950509},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1743490950509},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1743490950510},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1743490950510},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1743490950514},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1743490950517},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1743490950517},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/comments/discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":1743490950493},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1743490950514},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1743490950493},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1743490950493},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1743490950493},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1743490950493},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1743490950493},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1743490950493},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1743490950493},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1743490950493},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"954a29b58d72647d20450da270b5d8fb2e0824f5","modified":1743490950494},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":1743490950493},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"3d08c73b77e412d2f06a24d9344565fc7dbc76f8","modified":1743490950494},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1743490950494},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"e6dcbf1c2f56314d56bb46b50aca86ff68cacebd","modified":1743490950494},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"37d750428772d7c71ba36ce0c2540780d90fadea","modified":1743490950494},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1743490950494},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1743490950493},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1743490950494},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1743490950494},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1743490950495},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1743490950495},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1743490950495},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":1743490950495},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/plugins/moment.ejs","hash":"4ff3fb1b60ccc95a0af3bbdbd0757fedefc088b5","modified":1743490950495},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":1743490950495},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1743490950495},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"cbfa32c5f5973133afd043853b24f8200455cb2d","modified":1743490950495},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1743490950495},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":1743490950495},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":1743490950495},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1743490950495},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1743490950495},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1743490950495},{"_id":"themes/fluid/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"c19ac8050b82c3676b0332a56099ccfcc36d9d52","modified":1743490950497},{"_id":"themes/fluid/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1743490950497},{"_id":"themes/fluid/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"54dd479dbb440126e4ddd9d902229db5afaaae98","modified":1743490950495},{"_id":"themes/fluid/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"bd8376e1cf7892dc2daa58f2f443574be559fdbf","modified":1743490950497},{"_id":"themes/fluid/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1743490950497},{"_id":"themes/fluid/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"a5fe1deccb73b5f578797dbb11038efc15f63ce8","modified":1743490950497},{"_id":"themes/fluid/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1743490950497},{"_id":"themes/fluid/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1743490950497},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1743490950499},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1743490950499},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1743490950502},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1743490950502},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1743490950514},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1743490950514},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1743490950515},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"85492ef64d7e5f70f0f7e46d570bbc911e686d7e","modified":1743490950515},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1743490950515},{"_id":"themes/fluid/source/css/_pages/_base/print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":1743490950515},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1743490950516},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1743490950515},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1743490950516},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1743490950516},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1743490950516},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1743490950516},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1743490950516},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1743490950516},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"25fb6fa4c783b847c632584c49a7e1593cdb2f5d","modified":1743490950516},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"c96d36aa8fe20f0c3c1a29ee2473cd8064b10f73","modified":1743490950516},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1743490950517},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1743490950500},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"7eee3f78296a3c81849a5415d1d43dcc6e03e6aa","modified":1743490950516},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"85492ef64d7e5f70f0f7e46d570bbc911e686d7e","modified":1743490950501},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1743490950500},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1743490950501},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1743490950501},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1743490950501},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_base/print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":1743490950501},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1743490950501},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1743490950501},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"25fb6fa4c783b847c632584c49a7e1593cdb2f5d","modified":1743490950501},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1743490950501},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1743490950502},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1743490950501},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1743490950502},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1743490950502},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"7eee3f78296a3c81849a5415d1d43dcc6e03e6aa","modified":1743490950502},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"c96d36aa8fe20f0c3c1a29ee2473cd8064b10f73","modified":1743490950502},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1743490950514},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1743490950514},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1743490950514},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1743490950502},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1743490950514},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1743490950514},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1743490950515},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1743490950514},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1743490950515},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1743490950515},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1743490950515},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"d42b748f2f49ef32aafb1a21d75991d2459da927","modified":1743490950515},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1743490950515},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1743490950515},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1743490950515},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1743490950500},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1743490950500},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1743490950500},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1743490950500},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1743490950515},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1743490950515},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1743490950500},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1743490950500},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1743490950500},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1743490950500},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1743490950500},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1743490950500},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"d42b748f2f49ef32aafb1a21d75991d2459da927","modified":1743490950500},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1743490950501},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1743490950501},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1743490950501},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1743490950501},{"_id":"themes/fluid/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1743490950500},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1743490950518},{"_id":"themes/fluid/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1743490950503},{"_id":"public/local-search.xml","hash":"62db25454ed43d342639f7a281bc8b0f1a116862","modified":1743588227696},{"_id":"public/links/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1743588227696},{"_id":"public/about/index.html","hash":"4136cf02b05e27ea0b68b0e87a8338aaad83840c","modified":1743588227696},{"_id":"public/archives/index.html","hash":"f38c3e720a8b0291d621c12b89f3ead42cbc68fd","modified":1743588227696},{"_id":"public/archives/2025/index.html","hash":"b8d8b34f20eef1d9bc29bec303448cf4b061169f","modified":1743588227696},{"_id":"public/archives/2025/01/index.html","hash":"0da0875425a950a76fb22df25631c65ff57d240b","modified":1743588227696},{"_id":"public/archives/2025/04/index.html","hash":"39fcae659e5d8739788faf4de66ee6d387ad5600","modified":1743588227696},{"_id":"public/tags/Frontend-Development/index.html","hash":"d7278ed03b1ed3783469ff4404b5a861031381a1","modified":1743588227696},{"_id":"public/tags/Vue-Ecosystem/index.html","hash":"7cb5e84656778158964d000e224ef424d49aa849","modified":1743588227696},{"_id":"public/tags/Open-Source/index.html","hash":"78571cd8052271f2afbb403ff6bf4786b2ad3782","modified":1743588227696},{"_id":"public/tags/Tech-Growth/index.html","hash":"7c68e00ba894d68d60906eb84b2e5a5d3fb65d5e","modified":1743588227696},{"_id":"public/index.html","hash":"bdefc4d54de3c945deca6bf26fe39db8c8ff7d01","modified":1743588227696},{"_id":"public/404.html","hash":"b928dc0a7c09b68c42b5dfb440fd44b9fa859adc","modified":1743588227696},{"_id":"public/tags/index.html","hash":"b23a843f19f982edec11b288078f18ab6575033b","modified":1743588227696},{"_id":"public/categories/index.html","hash":"8e5de307257708cc0cac0dcec693f9fd27c39be9","modified":1743588227696},{"_id":"public/2025/04/01/Vue3组合式API最新实践/index.html","hash":"84f046be0a98b209e8923c275988aa5a759fb599","modified":1743588227696},{"_id":"public/2025/04/01/kaoyan/index.html","hash":"510d8c2c6c6b6a14b1d0fa6f626705bc17da40cf","modified":1743588227696},{"_id":"public/2025/01/03/me/index.html","hash":"8b2e09cd5a356601089f5d5371399901c395e245","modified":1743588227696},{"_id":"public/2025/01/03/hello-world/index.html","hash":"6580aecd7c64ede475eefca234faf557e91731dd","modified":1743588227696},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1743588227696},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1743588227696},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1743588227696},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1743588227696},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1743588227696},{"_id":"public/images/Vue2vsVue3.png","hash":"47f726af11a214a46d298a35b881c2c94ef1d243","modified":1743588227696},{"_id":"public/css/highlight-dark.css","hash":"902294bada4323c0f51502d67cba8c3a0298952f","modified":1743588227696},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1743588227696},{"_id":"public/css/highlight.css","hash":"04d4ddbb5e1d1007447c2fe293ee05aae9b9563e","modified":1743588227696},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1743588227696},{"_id":"public/js/events.js","hash":"6869811f67e4c3de3edfa4b08464bb242b97a402","modified":1743588227696},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1743588227696},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1743588227696},{"_id":"public/js/color-schema.js","hash":"1ef88c881b9f942deadde3d890387b94c617342a","modified":1743588227696},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1743588227696},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1743588227696},{"_id":"public/js/umami-view.js","hash":"33c4b3883fa747604074ad3921606eeeaeb50716","modified":1743588227696},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1743588227696},{"_id":"public/css/main.css","hash":"14ebd9b515085666cee29bbcbe362ad3604ab62a","modified":1743588227696},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1743588227696}],"Category":[],"Data":[],"Page":[{"title":"about","layout":"about","date":"2025-01-03T09:15:44.000Z","_content":"这里写关于页的正文，支持 Markdown, HTML","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\ndate: 2025-01-03 17:15:44\n---\n这里写关于页的正文，支持 Markdown, HTML","updated":"2025-01-03T09:17:29.145Z","path":"about/index.html","comments":1,"_id":"cm8zreux40000sm1y79mg22kk","content":"<p>这里写关于页的正文，支持 Markdown, HTML</p>\n","excerpt":"","more":"<p>这里写关于页的正文，支持 Markdown, HTML</p>\n"}],"Post":[{"title":"Vue3组合式API最新实践","date":"2025-04-01T07:38:29.000Z","_content":"\n# 前言\nVue3组合式API是Vue3引入的一种新的API风格，它通过将组件的逻辑拆分为多个可重用的函数，使得组件的代码更加清晰、可维护和可测试。本文将介绍Vue3组合式API的最新实践，包括最佳实践、性能优化和未来发展趋势。\n\n# 一、为什么组合式API是Vue3的革命性升级\n## 1.1 选项式API的痛点\n- <strong>代码碎片化：</strong>数据在 `data`，方法在 `methods`，计算属性在`computed`，生命周期钩子在 `mounted` 等选项中分散。\n- <strong>逻辑耦合：</strong>1000行组件中去找关联逻辑如同大海捞针。\n- <strong>可维护性差：</strong>Mixins存在命名冲突和来源不清晰问题。\n\n```js\n// 传统Options API（用户管理组件）\nexport default {\n  data () {\n    return {\n      users: [],\n      filters: {},\n      pagination: {}\n    }\n  },\n  methods: {\n    fetchUsers () {\n      // 实现用户数据获取逻辑\n    },\n    deleteUsers () {\n      // 实现用户过滤逻辑\n    },\n    handlePagination () {\n      // 实现分页逻辑\n    }\n  },\n  computed: {\n    filteredUsers () {\n      // 实现用户过滤计算\n    }\n  },\n  watch: {\n    filters: {\n      handler () {\n        // 实现用户过滤监听\n      },\n      deep: true\n    }\n  }\n}\n```\n\n## 1.2 组合式API的三大优势\n- <strong>逻辑聚合：</strong>按功能而非选项组织代码\n- <strong>完美复用：</strong>函数式封装实现\"即插即用\"\n- <strong>类型支持：</strong>天然适配TypeScript\n```js\n// 使用组合式API重构\nimport { useUserFetch } from './composables/userFetch'\nimport { useTableFilter } from './composables/tableFilter'\n \nexport default {\n  setup() {\n    const { users, fetchUsers } = useUserFetch()\n    const { filteredData, filters } = useTableFilter(users)\n    \n    return { users, filteredData, filters, fetchUsers }\n  }\n}\n```\n<!-- 引入对比图 -->\n![图片](/images/Vue2vsVue3.png)\n\n# 二、组合式API核心机制深度剖析（附完整代码）\n## 2.1 setup函数：新世界的入口\n```vue\n<template>\n  <button @click=\"increment\">{{ count }}</button>\n</template>\n\n<script setup>\n// 编译器语法糖\nimport { ref, onMounted } from 'vue'\nconst count = ref(0)\nfunction increment() {\n  count.value++\n}\n</script>\n```\n\n**关键细节：**\n- **执行时机**：在`beforeCreate`之前\n- **参数解析**：`props`是响应式的，不用解构\n- **Context对象**：包含`attrs` / `slots` / `emit`等\n\n## 2.2 ref() vs reactive() 选择指南\n\n| 场景           | 推荐方案                     | 原因                     |\n|----------------|------------------------------|--------------------------|\n| 基础类型数据   | `ref()`                      | 自动解包，模板使用更方便 |\n| 复杂对象/数组  | `reactive()`                 | 深层响应式，性能更优     |\n| 第三方类实例   | `reactive()`                 | 保持原型链方法           |\n| 跨组件状态共享 | `ref()` + `provide/inject`  | 响应式追踪更可控         |\n\n**ref的底层原理**\n```js\n// 深响应式\nexport function ref(value?: unknown) {\n  return createRef(value, false)\n}\n\n// 浅响应式\nexport function shallowRef(value?: unknown) {\n  return createRef(value, true)\n}\n\nfunction createRef(rawValue: unknown, shallow: boolean) {\n  // 如果传入的值已经是一个 ref，则直接返回它\n  if (isRef(rawValue)) {\n    return rawValue\n  }\n  // 否则，创建一个新的 RefImpl 实例\n  return new RefImpl(rawValue, shallow)\n}\n\nclass RefImpl<T> {\n  // 存储响应式的值。我们追踪和更新的就是_value。（这个是重点）\n  private _value: T\n  // 用于存储原始值，即未经任何响应式处理的值。（用于对比的，这块的内容可以不看）\n  private _rawValue: T \n\n  // 用于依赖跟踪的 Dep 类实例\n  public dep?: Dep = undefined\n  // 一个标记，表示这是一个 ref 实例\n  public readonly __v_isRef = true\n\n  constructor(\n    value: T,\n    public readonly __v_isShallow: boolean,\n  ) {\n    // 如果是浅响应式，直接使用原始值，否则转换为非响应式原始值\n    this._rawValue = __v_isShallow ? value : toRaw(value)\n    // 如果是浅响应式，直接使用原始值，否则转换为响应式值\n    this._value = __v_isShallow ? value : toReactive(value)\n    \n    // toRaw 用于将响应式引用转换回原始值\n    // toReactive 函数用于将传入的值转换为响应式对象。对于基本数据类型，toReactive 直接返回原始值。\n    // 对于对象和数组，toReactive 内部会调用 reactive 来创建一个响应式代理。\n    // 因此，对于 ref 来说，基本数据类型的值会被 RefImpl 直接包装，而对象和数组\n    // 会被 reactive 转换为响应式代理，最后也会被 RefImpl 包装。\n    // 这样，无论是哪种类型的数据，ref 都可以提供响应式的 value 属性，\n    // 使得数据变化可以被 Vue 正确追踪和更新。\n    // export const toReactive = (value) => isObject(value) ? reactive(value) : value\n  }\n\n  get value() {\n    // 追踪依赖，这样当 ref 的值发生变化时，依赖这个 ref 的组件或副作用函数可以重新运行。\n    trackRefValue(this)\n    // 返回存储的响应式值\n    return this._value\n  }\n\n  set value(newVal) {\n    // 判断是否应该使用新值的直接形式（浅响应式或只读）\n    const useDirectValue =\n      this.__v_isShallow || isShallow(newVal) || isReadonly(newVal)\n    // 如果需要，将新值转换为非响应式原始值\n    newVal = useDirectValue ? newVal : toRaw(newVal)\n    // 如果新值与旧值不同，更新 _rawValue 和 _value\n    if (hasChanged(newVal, this._rawValue)) {\n      this._rawValue = newVal\n      this._value = useDirectValue ? newVal : toReactive(newVal)\n      // 触发依赖更新\n      triggerRefValue(this, DirtyLevels.Dirty, newVal)\n    }\n  }\n}\n\n```\nref是一个函数，它接收一个内部值并且返回一个响应式且可变的引用对象。这个引用对象有一个`.value`属性，这个属性指向内部值。\n\n**reactive的底层原理**\n`reactive`是一个函数，它接受一个对象并返回该对象的响应式代理，也就是`proxy`。\n```js\nfunction reactive(target) {\n  if (target && target.__v_isReactive) {\n    return target\n  }\n\n  return createReactiveObject(\n    target,\n    false,\n    mutableHandlers,\n    mutableCollectionHandlers,\n    reactiveMap\n  )\n}\n\nfunction createReactiveObject(\n  target,\n  isReadonly,\n  baseHandlers,\n  collectionHandlers,\n  proxyMap\n) {\n  if (!isObject(target)) {\n    return target\n  }\n  \n  const existingProxy = proxyMap.get(target)\n  if (existingProxy) {\n    return existingProxy\n  }\n\n  const proxy = new Proxy(target, baseHandlers)\n  proxyMap.set(target, proxy)\n  return proxy\n}\n```\n`reactive`的源码简单很多，`reactive`通过`new Proxy(target, baseHandlers)` 创建了一个代理。这个代理会拦截对目标对象的操作，从而实现响应式。\n\n具体的使用：\n```js\nimport { reactive } from 'vue'\n\nlet state = reactive({ count: 0 })\nstate.count++\n```\n\n可以看出ref和reactive的区别：\n- 底层原理不一样\n- `ref`采用`RefImpl`实现，`reactive`则采用`Proxy`实现\n\n### ref更深入的理解\n当你使用 `new RefImpl(value)` 创建一个 `RefImpl` 实例时，实际上发生了以下几个步骤：\n1. **内部值**：实例存储了传递给构造函数的初始值。\n2. **依赖收集**：实例需要跟踪所有依赖于他的效果（effect），例如计算属性或者副作用函数。通常通过一个依赖列表或函数来实现。\n3. **触发更新**：当实例的值发生变化时，它需要通知所有依赖它的效果进行更新，以便他们可以重新计算或执行。\n\nRefImpl 类似于发布-订阅模式的设计，以下是一个简化的`RefImpl`类的伪代码：\n```js\nclass Dep {\n  constructor() {\n    this.subscribers = new Set();\n  }\n  depend() {\n    if (activeEffect) {\n      this.subscribers.add(activeEffect);\n    }\n  }\n  notify() {\n    this.subscribers.forEach(effect => effect());\n  }\n}\n\nlet activeEffect = null;\n\nfunction watchEffect(effect) {\n  activeEffect = effect;\n  effect();\n  activeEffect = null;\n}\n\nclass RefImpl {\n  constructor(value) {\n    this._value = value;\n    this.dep = new Dep();\n  }\n  get value() {\n    // 当获取值时，进行依赖收集\n    this.dep.depend();\n    return this._value;\n  }\n  set value(newValue) {\n    if (newValue !== this._value) {\n      this._value = newValue;\n      // 值改变时，触发更新\n      this.dep.notify();\n    }\n  }\n}\n\n// 使用实例\nlet count = new RefImpl(0);\n\nwatchEffect(() => {\n  console.log('Effect 1:', count.value); // 订阅变化\n})\ncount.value = 1; // 触发更新\n```\n\nDep类负责管理一个依赖列表，并提供依赖收集和通知更新的功能；RefImpl类包含一个内部值_value和一个Dep实例。当value被访问时，通过get方法进行依赖收集；当value被赋予新值时，通过set方法触发更新。\n\n### reactive的局限性\nVue3中，reactive API 通过 proxy实现了一种响应式数据的方式，尽管这种方法在性能上比vue2有所提升，但proxy的局限性也导致了reactive的局限性，这些局限性会影响开发者的使用体验。\n1.仅对引用数据类型有效\nreactive 主要适用于对象，包括数组和一些集合类型（如：Map和Set）。对于基础数据类型（如：string、number、boolean），reactive 无法直接响应。\n2.使用不当会失去响应\n  - 直接赋值对象，失去响应性\n  - 直接替换响应对象，失去响应性\n  - 直接解构对象，会失去响应性。解决：用toRefs函数来将响应式对象转换为ref对象\n  - 将响应式对象的属性赋值给变量，会失去响应式\n\n# 高级实战技巧\n## 3.1 通用数据请求封装\n```js\n// useFetch.js\nexport const useFetch = (url) => {\n  const data = ref(null)\n  const error = ref(null)\n  const loading = ref(false)\n\n  const fetchData = async () => {\n    try {\n      loading.value = true\n      const response = await axios.get(url)\n      data.value = response.data\n    } catch (err) {\n      error.value = err\n    } finally {\n      loading.value = false\n    }\n  }\n  onMounted(fetchData)\n  return { data, error, loading, retry: fetchData }\n}\n\n// 组件中使用\nconst { data: posts } = useFetch('/api/posts')\n```\n## 3.2 防抖探索实战\n```js\n// useDebounceSearch.js\nexport function useDebounceSearch(callback, delay=500) {\n  const searchQuery = ref('')\n  let timeoutId = null\n\n  watch(searchQuery, (newVal) => {\n    clearTimeout(timeoutId)\n    timeoutId = setTimeout(() => {\n      callback(newVal)\n    }, delay)\n  })\n\n  return { searchQuery }\n}\n```\n\n# 性能优化最佳实践\n## 4.1 计算属性缓存策略\n```js\nconst filteredList = computed(() => {\n  // 通过闭包缓存中间结果\n  const cached = {}\n  return (filterKey) => {\n    if(cache[filterKey]) return cache[filterKey]\n    return cache[filterKey] = heavyCompute()\n  }\n})\n```\n\n## 4.2 watchEffect()的高级用法\n```js\n// 立即执行+自动追踪依赖\nwatchEffect(() => {\n  const data = fetchData(params.value)\n  console.log('依赖自动追踪：',data)\n}, {\n  flush: 'post', // DOM更新后执行\n  onTrack(e) {} // 调试追踪\n})\n```\n\n## 4.3 内催泄露防范\n```js\n// 定时器示例\nonMounted(() => {\n  const timer = setInterval(() => {...}, 1000)\n  onUnmounted(() => clearInterval(timer))\n})\n```\n\n# TypeScript终级适配方案\n```js\ninterface User {\n  name: string\n  age: number,\n  id: number\n}\n\n// 带类型的Ref\nconst user = ref<User>({id: 1, name: 'Alice', age: 25})\n\n// 组合函数类型定义\nexport function useCounter(): {\n  count: Ref<number>\n  increment: () => void\n} {\n  // 实现逻辑...\n}\n```\n\n# 总结\n如果你对这篇文章有任何疑问、建议或者独特的见解，欢迎在评论区留言。无论是探讨技术细节，还是分享项目经验，都能让我们共同进步。","source":"_posts/Vue3组合式API最新实践.md","raw":"---\ntitle: Vue3组合式API最新实践\ndate: 2025-04-01 15:38:29\ntags:\n---\n\n# 前言\nVue3组合式API是Vue3引入的一种新的API风格，它通过将组件的逻辑拆分为多个可重用的函数，使得组件的代码更加清晰、可维护和可测试。本文将介绍Vue3组合式API的最新实践，包括最佳实践、性能优化和未来发展趋势。\n\n# 一、为什么组合式API是Vue3的革命性升级\n## 1.1 选项式API的痛点\n- <strong>代码碎片化：</strong>数据在 `data`，方法在 `methods`，计算属性在`computed`，生命周期钩子在 `mounted` 等选项中分散。\n- <strong>逻辑耦合：</strong>1000行组件中去找关联逻辑如同大海捞针。\n- <strong>可维护性差：</strong>Mixins存在命名冲突和来源不清晰问题。\n\n```js\n// 传统Options API（用户管理组件）\nexport default {\n  data () {\n    return {\n      users: [],\n      filters: {},\n      pagination: {}\n    }\n  },\n  methods: {\n    fetchUsers () {\n      // 实现用户数据获取逻辑\n    },\n    deleteUsers () {\n      // 实现用户过滤逻辑\n    },\n    handlePagination () {\n      // 实现分页逻辑\n    }\n  },\n  computed: {\n    filteredUsers () {\n      // 实现用户过滤计算\n    }\n  },\n  watch: {\n    filters: {\n      handler () {\n        // 实现用户过滤监听\n      },\n      deep: true\n    }\n  }\n}\n```\n\n## 1.2 组合式API的三大优势\n- <strong>逻辑聚合：</strong>按功能而非选项组织代码\n- <strong>完美复用：</strong>函数式封装实现\"即插即用\"\n- <strong>类型支持：</strong>天然适配TypeScript\n```js\n// 使用组合式API重构\nimport { useUserFetch } from './composables/userFetch'\nimport { useTableFilter } from './composables/tableFilter'\n \nexport default {\n  setup() {\n    const { users, fetchUsers } = useUserFetch()\n    const { filteredData, filters } = useTableFilter(users)\n    \n    return { users, filteredData, filters, fetchUsers }\n  }\n}\n```\n<!-- 引入对比图 -->\n![图片](/images/Vue2vsVue3.png)\n\n# 二、组合式API核心机制深度剖析（附完整代码）\n## 2.1 setup函数：新世界的入口\n```vue\n<template>\n  <button @click=\"increment\">{{ count }}</button>\n</template>\n\n<script setup>\n// 编译器语法糖\nimport { ref, onMounted } from 'vue'\nconst count = ref(0)\nfunction increment() {\n  count.value++\n}\n</script>\n```\n\n**关键细节：**\n- **执行时机**：在`beforeCreate`之前\n- **参数解析**：`props`是响应式的，不用解构\n- **Context对象**：包含`attrs` / `slots` / `emit`等\n\n## 2.2 ref() vs reactive() 选择指南\n\n| 场景           | 推荐方案                     | 原因                     |\n|----------------|------------------------------|--------------------------|\n| 基础类型数据   | `ref()`                      | 自动解包，模板使用更方便 |\n| 复杂对象/数组  | `reactive()`                 | 深层响应式，性能更优     |\n| 第三方类实例   | `reactive()`                 | 保持原型链方法           |\n| 跨组件状态共享 | `ref()` + `provide/inject`  | 响应式追踪更可控         |\n\n**ref的底层原理**\n```js\n// 深响应式\nexport function ref(value?: unknown) {\n  return createRef(value, false)\n}\n\n// 浅响应式\nexport function shallowRef(value?: unknown) {\n  return createRef(value, true)\n}\n\nfunction createRef(rawValue: unknown, shallow: boolean) {\n  // 如果传入的值已经是一个 ref，则直接返回它\n  if (isRef(rawValue)) {\n    return rawValue\n  }\n  // 否则，创建一个新的 RefImpl 实例\n  return new RefImpl(rawValue, shallow)\n}\n\nclass RefImpl<T> {\n  // 存储响应式的值。我们追踪和更新的就是_value。（这个是重点）\n  private _value: T\n  // 用于存储原始值，即未经任何响应式处理的值。（用于对比的，这块的内容可以不看）\n  private _rawValue: T \n\n  // 用于依赖跟踪的 Dep 类实例\n  public dep?: Dep = undefined\n  // 一个标记，表示这是一个 ref 实例\n  public readonly __v_isRef = true\n\n  constructor(\n    value: T,\n    public readonly __v_isShallow: boolean,\n  ) {\n    // 如果是浅响应式，直接使用原始值，否则转换为非响应式原始值\n    this._rawValue = __v_isShallow ? value : toRaw(value)\n    // 如果是浅响应式，直接使用原始值，否则转换为响应式值\n    this._value = __v_isShallow ? value : toReactive(value)\n    \n    // toRaw 用于将响应式引用转换回原始值\n    // toReactive 函数用于将传入的值转换为响应式对象。对于基本数据类型，toReactive 直接返回原始值。\n    // 对于对象和数组，toReactive 内部会调用 reactive 来创建一个响应式代理。\n    // 因此，对于 ref 来说，基本数据类型的值会被 RefImpl 直接包装，而对象和数组\n    // 会被 reactive 转换为响应式代理，最后也会被 RefImpl 包装。\n    // 这样，无论是哪种类型的数据，ref 都可以提供响应式的 value 属性，\n    // 使得数据变化可以被 Vue 正确追踪和更新。\n    // export const toReactive = (value) => isObject(value) ? reactive(value) : value\n  }\n\n  get value() {\n    // 追踪依赖，这样当 ref 的值发生变化时，依赖这个 ref 的组件或副作用函数可以重新运行。\n    trackRefValue(this)\n    // 返回存储的响应式值\n    return this._value\n  }\n\n  set value(newVal) {\n    // 判断是否应该使用新值的直接形式（浅响应式或只读）\n    const useDirectValue =\n      this.__v_isShallow || isShallow(newVal) || isReadonly(newVal)\n    // 如果需要，将新值转换为非响应式原始值\n    newVal = useDirectValue ? newVal : toRaw(newVal)\n    // 如果新值与旧值不同，更新 _rawValue 和 _value\n    if (hasChanged(newVal, this._rawValue)) {\n      this._rawValue = newVal\n      this._value = useDirectValue ? newVal : toReactive(newVal)\n      // 触发依赖更新\n      triggerRefValue(this, DirtyLevels.Dirty, newVal)\n    }\n  }\n}\n\n```\nref是一个函数，它接收一个内部值并且返回一个响应式且可变的引用对象。这个引用对象有一个`.value`属性，这个属性指向内部值。\n\n**reactive的底层原理**\n`reactive`是一个函数，它接受一个对象并返回该对象的响应式代理，也就是`proxy`。\n```js\nfunction reactive(target) {\n  if (target && target.__v_isReactive) {\n    return target\n  }\n\n  return createReactiveObject(\n    target,\n    false,\n    mutableHandlers,\n    mutableCollectionHandlers,\n    reactiveMap\n  )\n}\n\nfunction createReactiveObject(\n  target,\n  isReadonly,\n  baseHandlers,\n  collectionHandlers,\n  proxyMap\n) {\n  if (!isObject(target)) {\n    return target\n  }\n  \n  const existingProxy = proxyMap.get(target)\n  if (existingProxy) {\n    return existingProxy\n  }\n\n  const proxy = new Proxy(target, baseHandlers)\n  proxyMap.set(target, proxy)\n  return proxy\n}\n```\n`reactive`的源码简单很多，`reactive`通过`new Proxy(target, baseHandlers)` 创建了一个代理。这个代理会拦截对目标对象的操作，从而实现响应式。\n\n具体的使用：\n```js\nimport { reactive } from 'vue'\n\nlet state = reactive({ count: 0 })\nstate.count++\n```\n\n可以看出ref和reactive的区别：\n- 底层原理不一样\n- `ref`采用`RefImpl`实现，`reactive`则采用`Proxy`实现\n\n### ref更深入的理解\n当你使用 `new RefImpl(value)` 创建一个 `RefImpl` 实例时，实际上发生了以下几个步骤：\n1. **内部值**：实例存储了传递给构造函数的初始值。\n2. **依赖收集**：实例需要跟踪所有依赖于他的效果（effect），例如计算属性或者副作用函数。通常通过一个依赖列表或函数来实现。\n3. **触发更新**：当实例的值发生变化时，它需要通知所有依赖它的效果进行更新，以便他们可以重新计算或执行。\n\nRefImpl 类似于发布-订阅模式的设计，以下是一个简化的`RefImpl`类的伪代码：\n```js\nclass Dep {\n  constructor() {\n    this.subscribers = new Set();\n  }\n  depend() {\n    if (activeEffect) {\n      this.subscribers.add(activeEffect);\n    }\n  }\n  notify() {\n    this.subscribers.forEach(effect => effect());\n  }\n}\n\nlet activeEffect = null;\n\nfunction watchEffect(effect) {\n  activeEffect = effect;\n  effect();\n  activeEffect = null;\n}\n\nclass RefImpl {\n  constructor(value) {\n    this._value = value;\n    this.dep = new Dep();\n  }\n  get value() {\n    // 当获取值时，进行依赖收集\n    this.dep.depend();\n    return this._value;\n  }\n  set value(newValue) {\n    if (newValue !== this._value) {\n      this._value = newValue;\n      // 值改变时，触发更新\n      this.dep.notify();\n    }\n  }\n}\n\n// 使用实例\nlet count = new RefImpl(0);\n\nwatchEffect(() => {\n  console.log('Effect 1:', count.value); // 订阅变化\n})\ncount.value = 1; // 触发更新\n```\n\nDep类负责管理一个依赖列表，并提供依赖收集和通知更新的功能；RefImpl类包含一个内部值_value和一个Dep实例。当value被访问时，通过get方法进行依赖收集；当value被赋予新值时，通过set方法触发更新。\n\n### reactive的局限性\nVue3中，reactive API 通过 proxy实现了一种响应式数据的方式，尽管这种方法在性能上比vue2有所提升，但proxy的局限性也导致了reactive的局限性，这些局限性会影响开发者的使用体验。\n1.仅对引用数据类型有效\nreactive 主要适用于对象，包括数组和一些集合类型（如：Map和Set）。对于基础数据类型（如：string、number、boolean），reactive 无法直接响应。\n2.使用不当会失去响应\n  - 直接赋值对象，失去响应性\n  - 直接替换响应对象，失去响应性\n  - 直接解构对象，会失去响应性。解决：用toRefs函数来将响应式对象转换为ref对象\n  - 将响应式对象的属性赋值给变量，会失去响应式\n\n# 高级实战技巧\n## 3.1 通用数据请求封装\n```js\n// useFetch.js\nexport const useFetch = (url) => {\n  const data = ref(null)\n  const error = ref(null)\n  const loading = ref(false)\n\n  const fetchData = async () => {\n    try {\n      loading.value = true\n      const response = await axios.get(url)\n      data.value = response.data\n    } catch (err) {\n      error.value = err\n    } finally {\n      loading.value = false\n    }\n  }\n  onMounted(fetchData)\n  return { data, error, loading, retry: fetchData }\n}\n\n// 组件中使用\nconst { data: posts } = useFetch('/api/posts')\n```\n## 3.2 防抖探索实战\n```js\n// useDebounceSearch.js\nexport function useDebounceSearch(callback, delay=500) {\n  const searchQuery = ref('')\n  let timeoutId = null\n\n  watch(searchQuery, (newVal) => {\n    clearTimeout(timeoutId)\n    timeoutId = setTimeout(() => {\n      callback(newVal)\n    }, delay)\n  })\n\n  return { searchQuery }\n}\n```\n\n# 性能优化最佳实践\n## 4.1 计算属性缓存策略\n```js\nconst filteredList = computed(() => {\n  // 通过闭包缓存中间结果\n  const cached = {}\n  return (filterKey) => {\n    if(cache[filterKey]) return cache[filterKey]\n    return cache[filterKey] = heavyCompute()\n  }\n})\n```\n\n## 4.2 watchEffect()的高级用法\n```js\n// 立即执行+自动追踪依赖\nwatchEffect(() => {\n  const data = fetchData(params.value)\n  console.log('依赖自动追踪：',data)\n}, {\n  flush: 'post', // DOM更新后执行\n  onTrack(e) {} // 调试追踪\n})\n```\n\n## 4.3 内催泄露防范\n```js\n// 定时器示例\nonMounted(() => {\n  const timer = setInterval(() => {...}, 1000)\n  onUnmounted(() => clearInterval(timer))\n})\n```\n\n# TypeScript终级适配方案\n```js\ninterface User {\n  name: string\n  age: number,\n  id: number\n}\n\n// 带类型的Ref\nconst user = ref<User>({id: 1, name: 'Alice', age: 25})\n\n// 组合函数类型定义\nexport function useCounter(): {\n  count: Ref<number>\n  increment: () => void\n} {\n  // 实现逻辑...\n}\n```\n\n# 总结\n如果你对这篇文章有任何疑问、建议或者独特的见解，欢迎在评论区留言。无论是探讨技术细节，还是分享项目经验，都能让我们共同进步。","slug":"Vue3组合式API最新实践","published":1,"updated":"2025-04-02T09:30:48.169Z","comments":1,"layout":"post","photos":[],"_id":"cm8zreux60001sm1y7s3714ra","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Vue3组合式API是Vue3引入的一种新的API风格，它通过将组件的逻辑拆分为多个可重用的函数，使得组件的代码更加清晰、可维护和可测试。本文将介绍Vue3组合式API的最新实践，包括最佳实践、性能优化和未来发展趋势。</p>\n<h1 id=\"一、为什么组合式API是Vue3的革命性升级\"><a href=\"#一、为什么组合式API是Vue3的革命性升级\" class=\"headerlink\" title=\"一、为什么组合式API是Vue3的革命性升级\"></a>一、为什么组合式API是Vue3的革命性升级</h1><h2 id=\"1-1-选项式API的痛点\"><a href=\"#1-1-选项式API的痛点\" class=\"headerlink\" title=\"1.1 选项式API的痛点\"></a>1.1 选项式API的痛点</h2><ul>\n<li><strong>代码碎片化：</strong>数据在 <code>data</code>，方法在 <code>methods</code>，计算属性在<code>computed</code>，生命周期钩子在 <code>mounted</code> 等选项中分散。</li>\n<li><strong>逻辑耦合：</strong>1000行组件中去找关联逻辑如同大海捞针。</li>\n<li><strong>可维护性差：</strong>Mixins存在命名冲突和来源不清晰问题。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 传统Options API（用户管理组件）</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-title function_\">data</span> () &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      <span class=\"hljs-attr\">users</span>: [],<br>      <span class=\"hljs-attr\">filters</span>: &#123;&#125;,<br>      <span class=\"hljs-attr\">pagination</span>: &#123;&#125;<br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">methods</span>: &#123;<br>    <span class=\"hljs-title function_\">fetchUsers</span> () &#123;<br>      <span class=\"hljs-comment\">// 实现用户数据获取逻辑</span><br>    &#125;,<br>    <span class=\"hljs-title function_\">deleteUsers</span> () &#123;<br>      <span class=\"hljs-comment\">// 实现用户过滤逻辑</span><br>    &#125;,<br>    <span class=\"hljs-title function_\">handlePagination</span> () &#123;<br>      <span class=\"hljs-comment\">// 实现分页逻辑</span><br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">computed</span>: &#123;<br>    <span class=\"hljs-title function_\">filteredUsers</span> () &#123;<br>      <span class=\"hljs-comment\">// 实现用户过滤计算</span><br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">watch</span>: &#123;<br>    <span class=\"hljs-attr\">filters</span>: &#123;<br>      <span class=\"hljs-title function_\">handler</span> () &#123;<br>        <span class=\"hljs-comment\">// 实现用户过滤监听</span><br>      &#125;,<br>      <span class=\"hljs-attr\">deep</span>: <span class=\"hljs-literal\">true</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"1-2-组合式API的三大优势\"><a href=\"#1-2-组合式API的三大优势\" class=\"headerlink\" title=\"1.2 组合式API的三大优势\"></a>1.2 组合式API的三大优势</h2><ul>\n<li><strong>逻辑聚合：</strong>按功能而非选项组织代码</li>\n<li><strong>完美复用：</strong>函数式封装实现”即插即用”</li>\n<li><strong>类型支持：</strong>天然适配TypeScript<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 使用组合式API重构</span><br><span class=\"hljs-keyword\">import</span> &#123; useUserFetch &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./composables/userFetch&#x27;</span><br><span class=\"hljs-keyword\">import</span> &#123; useTableFilter &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./composables/tableFilter&#x27;</span><br> <br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-title function_\">setup</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">const</span> &#123; users, fetchUsers &#125; = <span class=\"hljs-title function_\">useUserFetch</span>()<br>    <span class=\"hljs-keyword\">const</span> &#123; filteredData, filters &#125; = <span class=\"hljs-title function_\">useTableFilter</span>(users)<br>    <br>    <span class=\"hljs-keyword\">return</span> &#123; users, filteredData, filters, fetchUsers &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<!-- 引入对比图 -->\n<img src=\"/images/Vue2vsVue3.png\" alt=\"图片\"></li>\n</ul>\n<h1 id=\"二、组合式API核心机制深度剖析（附完整代码）\"><a href=\"#二、组合式API核心机制深度剖析（附完整代码）\" class=\"headerlink\" title=\"二、组合式API核心机制深度剖析（附完整代码）\"></a>二、组合式API核心机制深度剖析（附完整代码）</h1><h2 id=\"2-1-setup函数：新世界的入口\"><a href=\"#2-1-setup函数：新世界的入口\" class=\"headerlink\" title=\"2.1 setup函数：新世界的入口\"></a>2.1 setup函数：新世界的入口</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>  &lt;button @click=&quot;increment&quot;&gt;&#123;&#123; count &#125;&#125;&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script setup&gt;<br>// 编译器语法糖<br>import &#123; ref, onMounted &#125; from &#x27;vue&#x27;<br>const count = ref(0)<br>function increment() &#123;<br>  count.value++<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n\n<p><strong>关键细节：</strong></p>\n<ul>\n<li><strong>执行时机</strong>：在<code>beforeCreate</code>之前</li>\n<li><strong>参数解析</strong>：<code>props</code>是响应式的，不用解构</li>\n<li><strong>Context对象</strong>：包含<code>attrs</code> &#x2F; <code>slots</code> &#x2F; <code>emit</code>等</li>\n</ul>\n<h2 id=\"2-2-ref-vs-reactive-选择指南\"><a href=\"#2-2-ref-vs-reactive-选择指南\" class=\"headerlink\" title=\"2.2 ref() vs reactive() 选择指南\"></a>2.2 ref() vs reactive() 选择指南</h2><table>\n<thead>\n<tr>\n<th>场景</th>\n<th>推荐方案</th>\n<th>原因</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>基础类型数据</td>\n<td><code>ref()</code></td>\n<td>自动解包，模板使用更方便</td>\n</tr>\n<tr>\n<td>复杂对象&#x2F;数组</td>\n<td><code>reactive()</code></td>\n<td>深层响应式，性能更优</td>\n</tr>\n<tr>\n<td>第三方类实例</td>\n<td><code>reactive()</code></td>\n<td>保持原型链方法</td>\n</tr>\n<tr>\n<td>跨组件状态共享</td>\n<td><code>ref()</code> + <code>provide/inject</code></td>\n<td>响应式追踪更可控</td>\n</tr>\n</tbody></table>\n<p><strong>ref的底层原理</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 深响应式</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-params\">value?: unknown</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">createRef</span>(value, <span class=\"hljs-literal\">false</span>)<br>&#125;<br><br><span class=\"hljs-comment\">// 浅响应式</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">shallowRef</span>(<span class=\"hljs-params\">value?: unknown</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">createRef</span>(value, <span class=\"hljs-literal\">true</span>)<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createRef</span>(<span class=\"hljs-params\">rawValue: unknown, shallow: boolean</span>) &#123;<br>  <span class=\"hljs-comment\">// 如果传入的值已经是一个 ref，则直接返回它</span><br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">isRef</span>(rawValue)) &#123;<br>    <span class=\"hljs-keyword\">return</span> rawValue<br>  &#125;<br>  <span class=\"hljs-comment\">// 否则，创建一个新的 RefImpl 实例</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RefImpl</span>(rawValue, shallow)<br>&#125;<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RefImpl</span>&lt;T&gt; &#123;<br>  <span class=\"hljs-comment\">// 存储响应式的值。我们追踪和更新的就是_value。（这个是重点）</span><br>  private <span class=\"hljs-attr\">_value</span>: T<br>  <span class=\"hljs-comment\">// 用于存储原始值，即未经任何响应式处理的值。（用于对比的，这块的内容可以不看）</span><br>  private <span class=\"hljs-attr\">_rawValue</span>: T <br><br>  <span class=\"hljs-comment\">// 用于依赖跟踪的 Dep 类实例</span><br>  public dep?: <span class=\"hljs-title class_\">Dep</span> = <span class=\"hljs-literal\">undefined</span><br>  <span class=\"hljs-comment\">// 一个标记，表示这是一个 ref 实例</span><br>  public readonly __v_isRef = <span class=\"hljs-literal\">true</span><br><br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span><br><span class=\"hljs-params\">    value: T,</span><br><span class=\"hljs-params\">    public readonly __v_isShallow: boolean,</span><br><span class=\"hljs-params\">  </span>) &#123;<br>    <span class=\"hljs-comment\">// 如果是浅响应式，直接使用原始值，否则转换为非响应式原始值</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_rawValue</span> = __v_isShallow ? value : <span class=\"hljs-title function_\">toRaw</span>(value)<br>    <span class=\"hljs-comment\">// 如果是浅响应式，直接使用原始值，否则转换为响应式值</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_value</span> = __v_isShallow ? value : <span class=\"hljs-title function_\">toReactive</span>(value)<br>    <br>    <span class=\"hljs-comment\">// toRaw 用于将响应式引用转换回原始值</span><br>    <span class=\"hljs-comment\">// toReactive 函数用于将传入的值转换为响应式对象。对于基本数据类型，toReactive 直接返回原始值。</span><br>    <span class=\"hljs-comment\">// 对于对象和数组，toReactive 内部会调用 reactive 来创建一个响应式代理。</span><br>    <span class=\"hljs-comment\">// 因此，对于 ref 来说，基本数据类型的值会被 RefImpl 直接包装，而对象和数组</span><br>    <span class=\"hljs-comment\">// 会被 reactive 转换为响应式代理，最后也会被 RefImpl 包装。</span><br>    <span class=\"hljs-comment\">// 这样，无论是哪种类型的数据，ref 都可以提供响应式的 value 属性，</span><br>    <span class=\"hljs-comment\">// 使得数据变化可以被 Vue 正确追踪和更新。</span><br>    <span class=\"hljs-comment\">// export const toReactive = (value) =&gt; isObject(value) ? reactive(value) : value</span><br>  &#125;<br><br>  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">value</span>() &#123;<br>    <span class=\"hljs-comment\">// 追踪依赖，这样当 ref 的值发生变化时，依赖这个 ref 的组件或副作用函数可以重新运行。</span><br>    <span class=\"hljs-title function_\">trackRefValue</span>(<span class=\"hljs-variable language_\">this</span>)<br>    <span class=\"hljs-comment\">// 返回存储的响应式值</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_value</span><br>  &#125;<br><br>  <span class=\"hljs-keyword\">set</span> <span class=\"hljs-title function_\">value</span>(<span class=\"hljs-params\">newVal</span>) &#123;<br>    <span class=\"hljs-comment\">// 判断是否应该使用新值的直接形式（浅响应式或只读）</span><br>    <span class=\"hljs-keyword\">const</span> useDirectValue =<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">__v_isShallow</span> || <span class=\"hljs-title function_\">isShallow</span>(newVal) || <span class=\"hljs-title function_\">isReadonly</span>(newVal)<br>    <span class=\"hljs-comment\">// 如果需要，将新值转换为非响应式原始值</span><br>    newVal = useDirectValue ? newVal : <span class=\"hljs-title function_\">toRaw</span>(newVal)<br>    <span class=\"hljs-comment\">// 如果新值与旧值不同，更新 _rawValue 和 _value</span><br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">hasChanged</span>(newVal, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_rawValue</span>)) &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_rawValue</span> = newVal<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_value</span> = useDirectValue ? newVal : <span class=\"hljs-title function_\">toReactive</span>(newVal)<br>      <span class=\"hljs-comment\">// 触发依赖更新</span><br>      <span class=\"hljs-title function_\">triggerRefValue</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-title class_\">DirtyLevels</span>.<span class=\"hljs-property\">Dirty</span>, newVal)<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>ref是一个函数，它接收一个内部值并且返回一个响应式且可变的引用对象。这个引用对象有一个<code>.value</code>属性，这个属性指向内部值。</p>\n<p><strong>reactive的底层原理</strong><br><code>reactive</code>是一个函数，它接受一个对象并返回该对象的响应式代理，也就是<code>proxy</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">reactive</span>(<span class=\"hljs-params\">target</span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (target &amp;&amp; target.<span class=\"hljs-property\">__v_isReactive</span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> target<br>  &#125;<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">createReactiveObject</span>(<br>    target,<br>    <span class=\"hljs-literal\">false</span>,<br>    mutableHandlers,<br>    mutableCollectionHandlers,<br>    reactiveMap<br>  )<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createReactiveObject</span>(<span class=\"hljs-params\"></span><br><span class=\"hljs-params\">  target,</span><br><span class=\"hljs-params\">  isReadonly,</span><br><span class=\"hljs-params\">  baseHandlers,</span><br><span class=\"hljs-params\">  collectionHandlers,</span><br><span class=\"hljs-params\">  proxyMap</span><br><span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title function_\">isObject</span>(target)) &#123;<br>    <span class=\"hljs-keyword\">return</span> target<br>  &#125;<br>  <br>  <span class=\"hljs-keyword\">const</span> existingProxy = proxyMap.<span class=\"hljs-title function_\">get</span>(target)<br>  <span class=\"hljs-keyword\">if</span> (existingProxy) &#123;<br>    <span class=\"hljs-keyword\">return</span> existingProxy<br>  &#125;<br><br>  <span class=\"hljs-keyword\">const</span> proxy = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Proxy</span>(target, baseHandlers)<br>  proxyMap.<span class=\"hljs-title function_\">set</span>(target, proxy)<br>  <span class=\"hljs-keyword\">return</span> proxy<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>reactive</code>的源码简单很多，<code>reactive</code>通过<code>new Proxy(target, baseHandlers)</code> 创建了一个代理。这个代理会拦截对目标对象的操作，从而实现响应式。</p>\n<p>具体的使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; reactive &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><br><span class=\"hljs-keyword\">let</span> state = <span class=\"hljs-title function_\">reactive</span>(&#123; <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span> &#125;)<br>state.<span class=\"hljs-property\">count</span>++<br></code></pre></td></tr></table></figure>\n\n<p>可以看出ref和reactive的区别：</p>\n<ul>\n<li>底层原理不一样</li>\n<li><code>ref</code>采用<code>RefImpl</code>实现，<code>reactive</code>则采用<code>Proxy</code>实现</li>\n</ul>\n<h3 id=\"ref更深入的理解\"><a href=\"#ref更深入的理解\" class=\"headerlink\" title=\"ref更深入的理解\"></a>ref更深入的理解</h3><p>当你使用 <code>new RefImpl(value)</code> 创建一个 <code>RefImpl</code> 实例时，实际上发生了以下几个步骤：</p>\n<ol>\n<li><strong>内部值</strong>：实例存储了传递给构造函数的初始值。</li>\n<li><strong>依赖收集</strong>：实例需要跟踪所有依赖于他的效果（effect），例如计算属性或者副作用函数。通常通过一个依赖列表或函数来实现。</li>\n<li><strong>触发更新</strong>：当实例的值发生变化时，它需要通知所有依赖它的效果进行更新，以便他们可以重新计算或执行。</li>\n</ol>\n<p>RefImpl 类似于发布-订阅模式的设计，以下是一个简化的<code>RefImpl</code>类的伪代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dep</span> &#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subscribers</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>();<br>  &#125;<br>  <span class=\"hljs-title function_\">depend</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (activeEffect) &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subscribers</span>.<span class=\"hljs-title function_\">add</span>(activeEffect);<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-title function_\">notify</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subscribers</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">effect</span> =&gt;</span> <span class=\"hljs-title function_\">effect</span>());<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> activeEffect = <span class=\"hljs-literal\">null</span>;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">watchEffect</span>(<span class=\"hljs-params\">effect</span>) &#123;<br>  activeEffect = effect;<br>  <span class=\"hljs-title function_\">effect</span>();<br>  activeEffect = <span class=\"hljs-literal\">null</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RefImpl</span> &#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">value</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_value</span> = value;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dep</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dep</span>();<br>  &#125;<br>  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">value</span>() &#123;<br>    <span class=\"hljs-comment\">// 当获取值时，进行依赖收集</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dep</span>.<span class=\"hljs-title function_\">depend</span>();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_value</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">set</span> <span class=\"hljs-title function_\">value</span>(<span class=\"hljs-params\">newValue</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (newValue !== <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_value</span>) &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_value</span> = newValue;<br>      <span class=\"hljs-comment\">// 值改变时，触发更新</span><br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dep</span>.<span class=\"hljs-title function_\">notify</span>();<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 使用实例</span><br><span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RefImpl</span>(<span class=\"hljs-number\">0</span>);<br><br><span class=\"hljs-title function_\">watchEffect</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Effect 1:&#x27;</span>, count.<span class=\"hljs-property\">value</span>); <span class=\"hljs-comment\">// 订阅变化</span><br>&#125;)<br>count.<span class=\"hljs-property\">value</span> = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 触发更新</span><br></code></pre></td></tr></table></figure>\n\n<p>Dep类负责管理一个依赖列表，并提供依赖收集和通知更新的功能；RefImpl类包含一个内部值_value和一个Dep实例。当value被访问时，通过get方法进行依赖收集；当value被赋予新值时，通过set方法触发更新。</p>\n<h3 id=\"reactive的局限性\"><a href=\"#reactive的局限性\" class=\"headerlink\" title=\"reactive的局限性\"></a>reactive的局限性</h3><p>Vue3中，reactive API 通过 proxy实现了一种响应式数据的方式，尽管这种方法在性能上比vue2有所提升，但proxy的局限性也导致了reactive的局限性，这些局限性会影响开发者的使用体验。<br>1.仅对引用数据类型有效<br>reactive 主要适用于对象，包括数组和一些集合类型（如：Map和Set）。对于基础数据类型（如：string、number、boolean），reactive 无法直接响应。<br>2.使用不当会失去响应</p>\n<ul>\n<li>直接赋值对象，失去响应性</li>\n<li>直接替换响应对象，失去响应性</li>\n<li>直接解构对象，会失去响应性。解决：用toRefs函数来将响应式对象转换为ref对象</li>\n<li>将响应式对象的属性赋值给变量，会失去响应式</li>\n</ul>\n<h1 id=\"高级实战技巧\"><a href=\"#高级实战技巧\" class=\"headerlink\" title=\"高级实战技巧\"></a>高级实战技巧</h1><h2 id=\"3-1-通用数据请求封装\"><a href=\"#3-1-通用数据请求封装\" class=\"headerlink\" title=\"3.1 通用数据请求封装\"></a>3.1 通用数据请求封装</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// useFetch.js</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">useFetch</span> = (<span class=\"hljs-params\">url</span>) =&gt; &#123;<br>  <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-literal\">null</span>)<br>  <span class=\"hljs-keyword\">const</span> error = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-literal\">null</span>)<br>  <span class=\"hljs-keyword\">const</span> loading = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-literal\">false</span>)<br><br>  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">fetchData</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) =&gt; &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>      loading.<span class=\"hljs-property\">value</span> = <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> axios.<span class=\"hljs-title function_\">get</span>(url)<br>      data.<span class=\"hljs-property\">value</span> = response.<span class=\"hljs-property\">data</span><br>    &#125; <span class=\"hljs-keyword\">catch</span> (err) &#123;<br>      error.<span class=\"hljs-property\">value</span> = err<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>      loading.<span class=\"hljs-property\">value</span> = <span class=\"hljs-literal\">false</span><br>    &#125;<br>  &#125;<br>  <span class=\"hljs-title function_\">onMounted</span>(fetchData)<br>  <span class=\"hljs-keyword\">return</span> &#123; data, error, loading, <span class=\"hljs-attr\">retry</span>: fetchData &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 组件中使用</span><br><span class=\"hljs-keyword\">const</span> &#123; <span class=\"hljs-attr\">data</span>: posts &#125; = <span class=\"hljs-title function_\">useFetch</span>(<span class=\"hljs-string\">&#x27;/api/posts&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<h2 id=\"3-2-防抖探索实战\"><a href=\"#3-2-防抖探索实战\" class=\"headerlink\" title=\"3.2 防抖探索实战\"></a>3.2 防抖探索实战</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// useDebounceSearch.js</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useDebounceSearch</span>(<span class=\"hljs-params\">callback, delay=<span class=\"hljs-number\">500</span></span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> searchQuery = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)<br>  <span class=\"hljs-keyword\">let</span> timeoutId = <span class=\"hljs-literal\">null</span><br><br>  <span class=\"hljs-title function_\">watch</span>(searchQuery, <span class=\"hljs-function\">(<span class=\"hljs-params\">newVal</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">clearTimeout</span>(timeoutId)<br>    timeoutId = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-title function_\">callback</span>(newVal)<br>    &#125;, delay)<br>  &#125;)<br><br>  <span class=\"hljs-keyword\">return</span> &#123; searchQuery &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"性能优化最佳实践\"><a href=\"#性能优化最佳实践\" class=\"headerlink\" title=\"性能优化最佳实践\"></a>性能优化最佳实践</h1><h2 id=\"4-1-计算属性缓存策略\"><a href=\"#4-1-计算属性缓存策略\" class=\"headerlink\" title=\"4.1 计算属性缓存策略\"></a>4.1 计算属性缓存策略</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> filteredList = <span class=\"hljs-title function_\">computed</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-comment\">// 通过闭包缓存中间结果</span><br>  <span class=\"hljs-keyword\">const</span> cached = &#123;&#125;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">filterKey</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">if</span>(cache[filterKey]) <span class=\"hljs-keyword\">return</span> cache[filterKey]<br>    <span class=\"hljs-keyword\">return</span> cache[filterKey] = <span class=\"hljs-title function_\">heavyCompute</span>()<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-2-watchEffect-的高级用法\"><a href=\"#4-2-watchEffect-的高级用法\" class=\"headerlink\" title=\"4.2 watchEffect()的高级用法\"></a>4.2 watchEffect()的高级用法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 立即执行+自动追踪依赖</span><br><span class=\"hljs-title function_\">watchEffect</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-title function_\">fetchData</span>(params.<span class=\"hljs-property\">value</span>)<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;依赖自动追踪：&#x27;</span>,data)<br>&#125;, &#123;<br>  <span class=\"hljs-attr\">flush</span>: <span class=\"hljs-string\">&#x27;post&#x27;</span>, <span class=\"hljs-comment\">// DOM更新后执行</span><br>  <span class=\"hljs-title function_\">onTrack</span>(<span class=\"hljs-params\">e</span>) &#123;&#125; <span class=\"hljs-comment\">// 调试追踪</span><br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-3-内催泄露防范\"><a href=\"#4-3-内催泄露防范\" class=\"headerlink\" title=\"4.3 内催泄露防范\"></a>4.3 内催泄露防范</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 定时器示例</span><br><span class=\"hljs-title function_\">onMounted</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> timer = <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;...&#125;, <span class=\"hljs-number\">1000</span>)<br>  <span class=\"hljs-title function_\">onUnmounted</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">clearInterval</span>(timer))<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"TypeScript终级适配方案\"><a href=\"#TypeScript终级适配方案\" class=\"headerlink\" title=\"TypeScript终级适配方案\"></a>TypeScript终级适配方案</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">interface <span class=\"hljs-title class_\">User</span> &#123;<br>  <span class=\"hljs-attr\">name</span>: string<br>  <span class=\"hljs-attr\">age</span>: number,<br>  <span class=\"hljs-attr\">id</span>: number<br>&#125;<br><br><span class=\"hljs-comment\">// 带类型的Ref</span><br><span class=\"hljs-keyword\">const</span> user = ref&lt;<span class=\"hljs-title class_\">User</span>&gt;(&#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Alice&#x27;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">25</span>&#125;)<br><br><span class=\"hljs-comment\">// 组合函数类型定义</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useCounter</span>(<span class=\"hljs-params\"></span>): &#123;<br>  <span class=\"hljs-attr\">count</span>: <span class=\"hljs-title class_\">Ref</span>&lt;number&gt;<br>  <span class=\"hljs-attr\">increment</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-keyword\">void</span><br>&#125; &#123;<br>  <span class=\"hljs-comment\">// 实现逻辑...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>如果你对这篇文章有任何疑问、建议或者独特的见解，欢迎在评论区留言。无论是探讨技术细节，还是分享项目经验，都能让我们共同进步。</p>\n","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Vue3组合式API是Vue3引入的一种新的API风格，它通过将组件的逻辑拆分为多个可重用的函数，使得组件的代码更加清晰、可维护和可测试。本文将介绍Vue3组合式API的最新实践，包括最佳实践、性能优化和未来发展趋势。</p>\n<h1 id=\"一、为什么组合式API是Vue3的革命性升级\"><a href=\"#一、为什么组合式API是Vue3的革命性升级\" class=\"headerlink\" title=\"一、为什么组合式API是Vue3的革命性升级\"></a>一、为什么组合式API是Vue3的革命性升级</h1><h2 id=\"1-1-选项式API的痛点\"><a href=\"#1-1-选项式API的痛点\" class=\"headerlink\" title=\"1.1 选项式API的痛点\"></a>1.1 选项式API的痛点</h2><ul>\n<li><strong>代码碎片化：</strong>数据在 <code>data</code>，方法在 <code>methods</code>，计算属性在<code>computed</code>，生命周期钩子在 <code>mounted</code> 等选项中分散。</li>\n<li><strong>逻辑耦合：</strong>1000行组件中去找关联逻辑如同大海捞针。</li>\n<li><strong>可维护性差：</strong>Mixins存在命名冲突和来源不清晰问题。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 传统Options API（用户管理组件）</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-title function_\">data</span> () &#123;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      <span class=\"hljs-attr\">users</span>: [],<br>      <span class=\"hljs-attr\">filters</span>: &#123;&#125;,<br>      <span class=\"hljs-attr\">pagination</span>: &#123;&#125;<br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">methods</span>: &#123;<br>    <span class=\"hljs-title function_\">fetchUsers</span> () &#123;<br>      <span class=\"hljs-comment\">// 实现用户数据获取逻辑</span><br>    &#125;,<br>    <span class=\"hljs-title function_\">deleteUsers</span> () &#123;<br>      <span class=\"hljs-comment\">// 实现用户过滤逻辑</span><br>    &#125;,<br>    <span class=\"hljs-title function_\">handlePagination</span> () &#123;<br>      <span class=\"hljs-comment\">// 实现分页逻辑</span><br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">computed</span>: &#123;<br>    <span class=\"hljs-title function_\">filteredUsers</span> () &#123;<br>      <span class=\"hljs-comment\">// 实现用户过滤计算</span><br>    &#125;<br>  &#125;,<br>  <span class=\"hljs-attr\">watch</span>: &#123;<br>    <span class=\"hljs-attr\">filters</span>: &#123;<br>      <span class=\"hljs-title function_\">handler</span> () &#123;<br>        <span class=\"hljs-comment\">// 实现用户过滤监听</span><br>      &#125;,<br>      <span class=\"hljs-attr\">deep</span>: <span class=\"hljs-literal\">true</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"1-2-组合式API的三大优势\"><a href=\"#1-2-组合式API的三大优势\" class=\"headerlink\" title=\"1.2 组合式API的三大优势\"></a>1.2 组合式API的三大优势</h2><ul>\n<li><strong>逻辑聚合：</strong>按功能而非选项组织代码</li>\n<li><strong>完美复用：</strong>函数式封装实现”即插即用”</li>\n<li><strong>类型支持：</strong>天然适配TypeScript<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 使用组合式API重构</span><br><span class=\"hljs-keyword\">import</span> &#123; useUserFetch &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./composables/userFetch&#x27;</span><br><span class=\"hljs-keyword\">import</span> &#123; useTableFilter &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./composables/tableFilter&#x27;</span><br> <br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> &#123;<br>  <span class=\"hljs-title function_\">setup</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">const</span> &#123; users, fetchUsers &#125; = <span class=\"hljs-title function_\">useUserFetch</span>()<br>    <span class=\"hljs-keyword\">const</span> &#123; filteredData, filters &#125; = <span class=\"hljs-title function_\">useTableFilter</span>(users)<br>    <br>    <span class=\"hljs-keyword\">return</span> &#123; users, filteredData, filters, fetchUsers &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<!-- 引入对比图 -->\n<img src=\"/images/Vue2vsVue3.png\" alt=\"图片\"></li>\n</ul>\n<h1 id=\"二、组合式API核心机制深度剖析（附完整代码）\"><a href=\"#二、组合式API核心机制深度剖析（附完整代码）\" class=\"headerlink\" title=\"二、组合式API核心机制深度剖析（附完整代码）\"></a>二、组合式API核心机制深度剖析（附完整代码）</h1><h2 id=\"2-1-setup函数：新世界的入口\"><a href=\"#2-1-setup函数：新世界的入口\" class=\"headerlink\" title=\"2.1 setup函数：新世界的入口\"></a>2.1 setup函数：新世界的入口</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">&lt;template&gt;<br>  &lt;button @click=&quot;increment&quot;&gt;&#123;&#123; count &#125;&#125;&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script setup&gt;<br>// 编译器语法糖<br>import &#123; ref, onMounted &#125; from &#x27;vue&#x27;<br>const count = ref(0)<br>function increment() &#123;<br>  count.value++<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n\n<p><strong>关键细节：</strong></p>\n<ul>\n<li><strong>执行时机</strong>：在<code>beforeCreate</code>之前</li>\n<li><strong>参数解析</strong>：<code>props</code>是响应式的，不用解构</li>\n<li><strong>Context对象</strong>：包含<code>attrs</code> &#x2F; <code>slots</code> &#x2F; <code>emit</code>等</li>\n</ul>\n<h2 id=\"2-2-ref-vs-reactive-选择指南\"><a href=\"#2-2-ref-vs-reactive-选择指南\" class=\"headerlink\" title=\"2.2 ref() vs reactive() 选择指南\"></a>2.2 ref() vs reactive() 选择指南</h2><table>\n<thead>\n<tr>\n<th>场景</th>\n<th>推荐方案</th>\n<th>原因</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>基础类型数据</td>\n<td><code>ref()</code></td>\n<td>自动解包，模板使用更方便</td>\n</tr>\n<tr>\n<td>复杂对象&#x2F;数组</td>\n<td><code>reactive()</code></td>\n<td>深层响应式，性能更优</td>\n</tr>\n<tr>\n<td>第三方类实例</td>\n<td><code>reactive()</code></td>\n<td>保持原型链方法</td>\n</tr>\n<tr>\n<td>跨组件状态共享</td>\n<td><code>ref()</code> + <code>provide/inject</code></td>\n<td>响应式追踪更可控</td>\n</tr>\n</tbody></table>\n<p><strong>ref的底层原理</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 深响应式</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-params\">value?: unknown</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">createRef</span>(value, <span class=\"hljs-literal\">false</span>)<br>&#125;<br><br><span class=\"hljs-comment\">// 浅响应式</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">shallowRef</span>(<span class=\"hljs-params\">value?: unknown</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">createRef</span>(value, <span class=\"hljs-literal\">true</span>)<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createRef</span>(<span class=\"hljs-params\">rawValue: unknown, shallow: boolean</span>) &#123;<br>  <span class=\"hljs-comment\">// 如果传入的值已经是一个 ref，则直接返回它</span><br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">isRef</span>(rawValue)) &#123;<br>    <span class=\"hljs-keyword\">return</span> rawValue<br>  &#125;<br>  <span class=\"hljs-comment\">// 否则，创建一个新的 RefImpl 实例</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RefImpl</span>(rawValue, shallow)<br>&#125;<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RefImpl</span>&lt;T&gt; &#123;<br>  <span class=\"hljs-comment\">// 存储响应式的值。我们追踪和更新的就是_value。（这个是重点）</span><br>  private <span class=\"hljs-attr\">_value</span>: T<br>  <span class=\"hljs-comment\">// 用于存储原始值，即未经任何响应式处理的值。（用于对比的，这块的内容可以不看）</span><br>  private <span class=\"hljs-attr\">_rawValue</span>: T <br><br>  <span class=\"hljs-comment\">// 用于依赖跟踪的 Dep 类实例</span><br>  public dep?: <span class=\"hljs-title class_\">Dep</span> = <span class=\"hljs-literal\">undefined</span><br>  <span class=\"hljs-comment\">// 一个标记，表示这是一个 ref 实例</span><br>  public readonly __v_isRef = <span class=\"hljs-literal\">true</span><br><br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span><br><span class=\"hljs-params\">    value: T,</span><br><span class=\"hljs-params\">    public readonly __v_isShallow: boolean,</span><br><span class=\"hljs-params\">  </span>) &#123;<br>    <span class=\"hljs-comment\">// 如果是浅响应式，直接使用原始值，否则转换为非响应式原始值</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_rawValue</span> = __v_isShallow ? value : <span class=\"hljs-title function_\">toRaw</span>(value)<br>    <span class=\"hljs-comment\">// 如果是浅响应式，直接使用原始值，否则转换为响应式值</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_value</span> = __v_isShallow ? value : <span class=\"hljs-title function_\">toReactive</span>(value)<br>    <br>    <span class=\"hljs-comment\">// toRaw 用于将响应式引用转换回原始值</span><br>    <span class=\"hljs-comment\">// toReactive 函数用于将传入的值转换为响应式对象。对于基本数据类型，toReactive 直接返回原始值。</span><br>    <span class=\"hljs-comment\">// 对于对象和数组，toReactive 内部会调用 reactive 来创建一个响应式代理。</span><br>    <span class=\"hljs-comment\">// 因此，对于 ref 来说，基本数据类型的值会被 RefImpl 直接包装，而对象和数组</span><br>    <span class=\"hljs-comment\">// 会被 reactive 转换为响应式代理，最后也会被 RefImpl 包装。</span><br>    <span class=\"hljs-comment\">// 这样，无论是哪种类型的数据，ref 都可以提供响应式的 value 属性，</span><br>    <span class=\"hljs-comment\">// 使得数据变化可以被 Vue 正确追踪和更新。</span><br>    <span class=\"hljs-comment\">// export const toReactive = (value) =&gt; isObject(value) ? reactive(value) : value</span><br>  &#125;<br><br>  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">value</span>() &#123;<br>    <span class=\"hljs-comment\">// 追踪依赖，这样当 ref 的值发生变化时，依赖这个 ref 的组件或副作用函数可以重新运行。</span><br>    <span class=\"hljs-title function_\">trackRefValue</span>(<span class=\"hljs-variable language_\">this</span>)<br>    <span class=\"hljs-comment\">// 返回存储的响应式值</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_value</span><br>  &#125;<br><br>  <span class=\"hljs-keyword\">set</span> <span class=\"hljs-title function_\">value</span>(<span class=\"hljs-params\">newVal</span>) &#123;<br>    <span class=\"hljs-comment\">// 判断是否应该使用新值的直接形式（浅响应式或只读）</span><br>    <span class=\"hljs-keyword\">const</span> useDirectValue =<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">__v_isShallow</span> || <span class=\"hljs-title function_\">isShallow</span>(newVal) || <span class=\"hljs-title function_\">isReadonly</span>(newVal)<br>    <span class=\"hljs-comment\">// 如果需要，将新值转换为非响应式原始值</span><br>    newVal = useDirectValue ? newVal : <span class=\"hljs-title function_\">toRaw</span>(newVal)<br>    <span class=\"hljs-comment\">// 如果新值与旧值不同，更新 _rawValue 和 _value</span><br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">hasChanged</span>(newVal, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_rawValue</span>)) &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_rawValue</span> = newVal<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_value</span> = useDirectValue ? newVal : <span class=\"hljs-title function_\">toReactive</span>(newVal)<br>      <span class=\"hljs-comment\">// 触发依赖更新</span><br>      <span class=\"hljs-title function_\">triggerRefValue</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-title class_\">DirtyLevels</span>.<span class=\"hljs-property\">Dirty</span>, newVal)<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>ref是一个函数，它接收一个内部值并且返回一个响应式且可变的引用对象。这个引用对象有一个<code>.value</code>属性，这个属性指向内部值。</p>\n<p><strong>reactive的底层原理</strong><br><code>reactive</code>是一个函数，它接受一个对象并返回该对象的响应式代理，也就是<code>proxy</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">reactive</span>(<span class=\"hljs-params\">target</span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (target &amp;&amp; target.<span class=\"hljs-property\">__v_isReactive</span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> target<br>  &#125;<br><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">createReactiveObject</span>(<br>    target,<br>    <span class=\"hljs-literal\">false</span>,<br>    mutableHandlers,<br>    mutableCollectionHandlers,<br>    reactiveMap<br>  )<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createReactiveObject</span>(<span class=\"hljs-params\"></span><br><span class=\"hljs-params\">  target,</span><br><span class=\"hljs-params\">  isReadonly,</span><br><span class=\"hljs-params\">  baseHandlers,</span><br><span class=\"hljs-params\">  collectionHandlers,</span><br><span class=\"hljs-params\">  proxyMap</span><br><span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title function_\">isObject</span>(target)) &#123;<br>    <span class=\"hljs-keyword\">return</span> target<br>  &#125;<br>  <br>  <span class=\"hljs-keyword\">const</span> existingProxy = proxyMap.<span class=\"hljs-title function_\">get</span>(target)<br>  <span class=\"hljs-keyword\">if</span> (existingProxy) &#123;<br>    <span class=\"hljs-keyword\">return</span> existingProxy<br>  &#125;<br><br>  <span class=\"hljs-keyword\">const</span> proxy = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Proxy</span>(target, baseHandlers)<br>  proxyMap.<span class=\"hljs-title function_\">set</span>(target, proxy)<br>  <span class=\"hljs-keyword\">return</span> proxy<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>reactive</code>的源码简单很多，<code>reactive</code>通过<code>new Proxy(target, baseHandlers)</code> 创建了一个代理。这个代理会拦截对目标对象的操作，从而实现响应式。</p>\n<p>具体的使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> &#123; reactive &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;vue&#x27;</span><br><br><span class=\"hljs-keyword\">let</span> state = <span class=\"hljs-title function_\">reactive</span>(&#123; <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span> &#125;)<br>state.<span class=\"hljs-property\">count</span>++<br></code></pre></td></tr></table></figure>\n\n<p>可以看出ref和reactive的区别：</p>\n<ul>\n<li>底层原理不一样</li>\n<li><code>ref</code>采用<code>RefImpl</code>实现，<code>reactive</code>则采用<code>Proxy</code>实现</li>\n</ul>\n<h3 id=\"ref更深入的理解\"><a href=\"#ref更深入的理解\" class=\"headerlink\" title=\"ref更深入的理解\"></a>ref更深入的理解</h3><p>当你使用 <code>new RefImpl(value)</code> 创建一个 <code>RefImpl</code> 实例时，实际上发生了以下几个步骤：</p>\n<ol>\n<li><strong>内部值</strong>：实例存储了传递给构造函数的初始值。</li>\n<li><strong>依赖收集</strong>：实例需要跟踪所有依赖于他的效果（effect），例如计算属性或者副作用函数。通常通过一个依赖列表或函数来实现。</li>\n<li><strong>触发更新</strong>：当实例的值发生变化时，它需要通知所有依赖它的效果进行更新，以便他们可以重新计算或执行。</li>\n</ol>\n<p>RefImpl 类似于发布-订阅模式的设计，以下是一个简化的<code>RefImpl</code>类的伪代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dep</span> &#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subscribers</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>();<br>  &#125;<br>  <span class=\"hljs-title function_\">depend</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (activeEffect) &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subscribers</span>.<span class=\"hljs-title function_\">add</span>(activeEffect);<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-title function_\">notify</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subscribers</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">effect</span> =&gt;</span> <span class=\"hljs-title function_\">effect</span>());<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> activeEffect = <span class=\"hljs-literal\">null</span>;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">watchEffect</span>(<span class=\"hljs-params\">effect</span>) &#123;<br>  activeEffect = effect;<br>  <span class=\"hljs-title function_\">effect</span>();<br>  activeEffect = <span class=\"hljs-literal\">null</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RefImpl</span> &#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">value</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_value</span> = value;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dep</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dep</span>();<br>  &#125;<br>  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">value</span>() &#123;<br>    <span class=\"hljs-comment\">// 当获取值时，进行依赖收集</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dep</span>.<span class=\"hljs-title function_\">depend</span>();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_value</span>;<br>  &#125;<br>  <span class=\"hljs-keyword\">set</span> <span class=\"hljs-title function_\">value</span>(<span class=\"hljs-params\">newValue</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span> (newValue !== <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_value</span>) &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_value</span> = newValue;<br>      <span class=\"hljs-comment\">// 值改变时，触发更新</span><br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">dep</span>.<span class=\"hljs-title function_\">notify</span>();<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 使用实例</span><br><span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RefImpl</span>(<span class=\"hljs-number\">0</span>);<br><br><span class=\"hljs-title function_\">watchEffect</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Effect 1:&#x27;</span>, count.<span class=\"hljs-property\">value</span>); <span class=\"hljs-comment\">// 订阅变化</span><br>&#125;)<br>count.<span class=\"hljs-property\">value</span> = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 触发更新</span><br></code></pre></td></tr></table></figure>\n\n<p>Dep类负责管理一个依赖列表，并提供依赖收集和通知更新的功能；RefImpl类包含一个内部值_value和一个Dep实例。当value被访问时，通过get方法进行依赖收集；当value被赋予新值时，通过set方法触发更新。</p>\n<h3 id=\"reactive的局限性\"><a href=\"#reactive的局限性\" class=\"headerlink\" title=\"reactive的局限性\"></a>reactive的局限性</h3><p>Vue3中，reactive API 通过 proxy实现了一种响应式数据的方式，尽管这种方法在性能上比vue2有所提升，但proxy的局限性也导致了reactive的局限性，这些局限性会影响开发者的使用体验。<br>1.仅对引用数据类型有效<br>reactive 主要适用于对象，包括数组和一些集合类型（如：Map和Set）。对于基础数据类型（如：string、number、boolean），reactive 无法直接响应。<br>2.使用不当会失去响应</p>\n<ul>\n<li>直接赋值对象，失去响应性</li>\n<li>直接替换响应对象，失去响应性</li>\n<li>直接解构对象，会失去响应性。解决：用toRefs函数来将响应式对象转换为ref对象</li>\n<li>将响应式对象的属性赋值给变量，会失去响应式</li>\n</ul>\n<h1 id=\"高级实战技巧\"><a href=\"#高级实战技巧\" class=\"headerlink\" title=\"高级实战技巧\"></a>高级实战技巧</h1><h2 id=\"3-1-通用数据请求封装\"><a href=\"#3-1-通用数据请求封装\" class=\"headerlink\" title=\"3.1 通用数据请求封装\"></a>3.1 通用数据请求封装</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// useFetch.js</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">useFetch</span> = (<span class=\"hljs-params\">url</span>) =&gt; &#123;<br>  <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-literal\">null</span>)<br>  <span class=\"hljs-keyword\">const</span> error = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-literal\">null</span>)<br>  <span class=\"hljs-keyword\">const</span> loading = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-literal\">false</span>)<br><br>  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">fetchData</span> = <span class=\"hljs-keyword\">async</span> (<span class=\"hljs-params\"></span>) =&gt; &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>      loading.<span class=\"hljs-property\">value</span> = <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-keyword\">const</span> response = <span class=\"hljs-keyword\">await</span> axios.<span class=\"hljs-title function_\">get</span>(url)<br>      data.<span class=\"hljs-property\">value</span> = response.<span class=\"hljs-property\">data</span><br>    &#125; <span class=\"hljs-keyword\">catch</span> (err) &#123;<br>      error.<span class=\"hljs-property\">value</span> = err<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>      loading.<span class=\"hljs-property\">value</span> = <span class=\"hljs-literal\">false</span><br>    &#125;<br>  &#125;<br>  <span class=\"hljs-title function_\">onMounted</span>(fetchData)<br>  <span class=\"hljs-keyword\">return</span> &#123; data, error, loading, <span class=\"hljs-attr\">retry</span>: fetchData &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 组件中使用</span><br><span class=\"hljs-keyword\">const</span> &#123; <span class=\"hljs-attr\">data</span>: posts &#125; = <span class=\"hljs-title function_\">useFetch</span>(<span class=\"hljs-string\">&#x27;/api/posts&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<h2 id=\"3-2-防抖探索实战\"><a href=\"#3-2-防抖探索实战\" class=\"headerlink\" title=\"3.2 防抖探索实战\"></a>3.2 防抖探索实战</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// useDebounceSearch.js</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useDebounceSearch</span>(<span class=\"hljs-params\">callback, delay=<span class=\"hljs-number\">500</span></span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> searchQuery = <span class=\"hljs-title function_\">ref</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)<br>  <span class=\"hljs-keyword\">let</span> timeoutId = <span class=\"hljs-literal\">null</span><br><br>  <span class=\"hljs-title function_\">watch</span>(searchQuery, <span class=\"hljs-function\">(<span class=\"hljs-params\">newVal</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-built_in\">clearTimeout</span>(timeoutId)<br>    timeoutId = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-title function_\">callback</span>(newVal)<br>    &#125;, delay)<br>  &#125;)<br><br>  <span class=\"hljs-keyword\">return</span> &#123; searchQuery &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"性能优化最佳实践\"><a href=\"#性能优化最佳实践\" class=\"headerlink\" title=\"性能优化最佳实践\"></a>性能优化最佳实践</h1><h2 id=\"4-1-计算属性缓存策略\"><a href=\"#4-1-计算属性缓存策略\" class=\"headerlink\" title=\"4.1 计算属性缓存策略\"></a>4.1 计算属性缓存策略</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> filteredList = <span class=\"hljs-title function_\">computed</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-comment\">// 通过闭包缓存中间结果</span><br>  <span class=\"hljs-keyword\">const</span> cached = &#123;&#125;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">filterKey</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">if</span>(cache[filterKey]) <span class=\"hljs-keyword\">return</span> cache[filterKey]<br>    <span class=\"hljs-keyword\">return</span> cache[filterKey] = <span class=\"hljs-title function_\">heavyCompute</span>()<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-2-watchEffect-的高级用法\"><a href=\"#4-2-watchEffect-的高级用法\" class=\"headerlink\" title=\"4.2 watchEffect()的高级用法\"></a>4.2 watchEffect()的高级用法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 立即执行+自动追踪依赖</span><br><span class=\"hljs-title function_\">watchEffect</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-title function_\">fetchData</span>(params.<span class=\"hljs-property\">value</span>)<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;依赖自动追踪：&#x27;</span>,data)<br>&#125;, &#123;<br>  <span class=\"hljs-attr\">flush</span>: <span class=\"hljs-string\">&#x27;post&#x27;</span>, <span class=\"hljs-comment\">// DOM更新后执行</span><br>  <span class=\"hljs-title function_\">onTrack</span>(<span class=\"hljs-params\">e</span>) &#123;&#125; <span class=\"hljs-comment\">// 调试追踪</span><br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-3-内催泄露防范\"><a href=\"#4-3-内催泄露防范\" class=\"headerlink\" title=\"4.3 内催泄露防范\"></a>4.3 内催泄露防范</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 定时器示例</span><br><span class=\"hljs-title function_\">onMounted</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>  <span class=\"hljs-keyword\">const</span> timer = <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;...&#125;, <span class=\"hljs-number\">1000</span>)<br>  <span class=\"hljs-title function_\">onUnmounted</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">clearInterval</span>(timer))<br>&#125;)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"TypeScript终级适配方案\"><a href=\"#TypeScript终级适配方案\" class=\"headerlink\" title=\"TypeScript终级适配方案\"></a>TypeScript终级适配方案</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">interface <span class=\"hljs-title class_\">User</span> &#123;<br>  <span class=\"hljs-attr\">name</span>: string<br>  <span class=\"hljs-attr\">age</span>: number,<br>  <span class=\"hljs-attr\">id</span>: number<br>&#125;<br><br><span class=\"hljs-comment\">// 带类型的Ref</span><br><span class=\"hljs-keyword\">const</span> user = ref&lt;<span class=\"hljs-title class_\">User</span>&gt;(&#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Alice&#x27;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">25</span>&#125;)<br><br><span class=\"hljs-comment\">// 组合函数类型定义</span><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useCounter</span>(<span class=\"hljs-params\"></span>): &#123;<br>  <span class=\"hljs-attr\">count</span>: <span class=\"hljs-title class_\">Ref</span>&lt;number&gt;<br>  <span class=\"hljs-attr\">increment</span>: <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-keyword\">void</span><br>&#125; &#123;<br>  <span class=\"hljs-comment\">// 实现逻辑...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>如果你对这篇文章有任何疑问、建议或者独特的见解，欢迎在评论区留言。无论是探讨技术细节，还是分享项目经验，都能让我们共同进步。</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2025-01-03T05:40:10.883Z","updated":"2025-01-03T09:21:26.836Z","comments":1,"layout":"post","photos":[],"_id":"cm8zreux70002sm1y7usv29o4","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"_content":"<!-- \n\n我选了最难的计算机考研科目408，下班时间之后我回家做题学习，但是很快发现跟的王道的课程难以理解，跟的汤家凤高数学习也很难输出，发现听的全懂，做的题都不会。但是我没有放弃，可是直到10月，我报名了考研考试，23年疫情封控接触后，刚好考试那几天第一次阳了发烧，就没去考试了。\n\n2023年我早早地准备了考研的学习路线，希望充分准备，陆陆续续地学习，但是我发现自己的学习效率非常低，每天都在学习，但是没有产出。最后12月去考了，发现英语和政治竟然考的还可以，就是数学和408考的像没学过一样考得特别差。我当时想好了24年再考一次的。\n\n24年年初，我把所有的考试资料都买好了，还买了一个计算机考研的网课。后面我想通了，第1点，读研需要花费3年时间，占用周末去学校学习，工作日上班。在我看来，计算机科学的学习，不一定要拿到个硕士文凭，而是要在项目中成长的，其实有兴趣自学也是可以达到自己目的的。第2点，我发现我是出自工作的焦虑而考虑考研提升学历，但是学校里面读硕士主要还是为一些学术类研究做人才储备的，我也在考虑我是否适合做学术研究而非项目开发。 -->\n\n待更新......","source":"_posts/kaoyan.md","raw":"<!-- \n\n我选了最难的计算机考研科目408，下班时间之后我回家做题学习，但是很快发现跟的王道的课程难以理解，跟的汤家凤高数学习也很难输出，发现听的全懂，做的题都不会。但是我没有放弃，可是直到10月，我报名了考研考试，23年疫情封控接触后，刚好考试那几天第一次阳了发烧，就没去考试了。\n\n2023年我早早地准备了考研的学习路线，希望充分准备，陆陆续续地学习，但是我发现自己的学习效率非常低，每天都在学习，但是没有产出。最后12月去考了，发现英语和政治竟然考的还可以，就是数学和408考的像没学过一样考得特别差。我当时想好了24年再考一次的。\n\n24年年初，我把所有的考试资料都买好了，还买了一个计算机考研的网课。后面我想通了，第1点，读研需要花费3年时间，占用周末去学校学习，工作日上班。在我看来，计算机科学的学习，不一定要拿到个硕士文凭，而是要在项目中成长的，其实有兴趣自学也是可以达到自己目的的。第2点，我发现我是出自工作的焦虑而考虑考研提升学历，但是学校里面读硕士主要还是为一些学术类研究做人才储备的，我也在考虑我是否适合做学术研究而非项目开发。 -->\n\n待更新......","slug":"kaoyan","published":1,"date":"2025-04-01T07:02:30.490Z","updated":"2025-04-01T07:02:30.490Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cm8zreux80003sm1y3w95fsf2","content":"<!-- \n\n我选了最难的计算机考研科目408，下班时间之后我回家做题学习，但是很快发现跟的王道的课程难以理解，跟的汤家凤高数学习也很难输出，发现听的全懂，做的题都不会。但是我没有放弃，可是直到10月，我报名了考研考试，23年疫情封控接触后，刚好考试那几天第一次阳了发烧，就没去考试了。\n\n2023年我早早地准备了考研的学习路线，希望充分准备，陆陆续续地学习，但是我发现自己的学习效率非常低，每天都在学习，但是没有产出。最后12月去考了，发现英语和政治竟然考的还可以，就是数学和408考的像没学过一样考得特别差。我当时想好了24年再考一次的。\n\n24年年初，我把所有的考试资料都买好了，还买了一个计算机考研的网课。后面我想通了，第1点，读研需要花费3年时间，占用周末去学校学习，工作日上班。在我看来，计算机科学的学习，不一定要拿到个硕士文凭，而是要在项目中成长的，其实有兴趣自学也是可以达到自己目的的。第2点，我发现我是出自工作的焦虑而考虑考研提升学历，但是学校里面读硕士主要还是为一些学术类研究做人才储备的，我也在考虑我是否适合做学术研究而非项目开发。 -->\n\n<p>待更新……</p>\n","excerpt":"","more":"<!-- \n\n我选了最难的计算机考研科目408，下班时间之后我回家做题学习，但是很快发现跟的王道的课程难以理解，跟的汤家凤高数学习也很难输出，发现听的全懂，做的题都不会。但是我没有放弃，可是直到10月，我报名了考研考试，23年疫情封控接触后，刚好考试那几天第一次阳了发烧，就没去考试了。\n\n2023年我早早地准备了考研的学习路线，希望充分准备，陆陆续续地学习，但是我发现自己的学习效率非常低，每天都在学习，但是没有产出。最后12月去考了，发现英语和政治竟然考的还可以，就是数学和408考的像没学过一样考得特别差。我当时想好了24年再考一次的。\n\n24年年初，我把所有的考试资料都买好了，还买了一个计算机考研的网课。后面我想通了，第1点，读研需要花费3年时间，占用周末去学校学习，工作日上班。在我看来，计算机科学的学习，不一定要拿到个硕士文凭，而是要在项目中成长的，其实有兴趣自学也是可以达到自己目的的。第2点，我发现我是出自工作的焦虑而考虑考研提升学历，但是学校里面读硕士主要还是为一些学术类研究做人才储备的，我也在考虑我是否适合做学术研究而非项目开发。 -->\n\n<p>待更新……</p>\n"},{"title":"Angelanana | Full-stack Explorer","date":"2025-01-03T07:46:16.000Z","_content":"\n<div class=\"bio-container\">\n  <div class=\"lang-section cn\">\n  \n### 👩💻 技术轨迹\n**全栈工程师** | **开源贡献者** | **终身学习者**\n\n**2020-2025** 前端领域深度实践者：\n- **核心领域**：Vue2/3全栈方案、Nuxt服务端渲染、Electron桌面开发\n- **技术生态**：NestJS企业级框架、Node中间件开发、Webpack/Vite工程化体系\n- **架构实践**：主导5+中后台系统，设计跨项目组件库，参与华为开源组件开发\n\n**技术里程碑**：\n- 🏆 2022年华为DevUI开源贡献者，主导面包屑导航、树形选择组件开发（10+项目采用）\n- 🚀 构建企业级组件库架构，开发效率提升40%，编制《Vue3组合式API最佳实践》\n- 🔥 2025年完成Nuxt3项目重构，首屏性能优化至LCP 0.8s（下降62%）\n\n  </div>\n\n  <div class=\"lang-section en\">\n\n### 👩💻 Tech Odyssey\n**Full-stack Engineer** | **OSS Contributor** | **Lifelong Learner**\n\n**2020-2025** Frontend Specialist:\n- **Core Stack**: Vue2/3 Full Solutions, Nuxt SSR, Electron Desktop Dev\n- **Tech Ecosystem**: NestJS Enterprise Framework, Node Middleware, Webpack/Vite Tooling\n- **Architecture**: Led 5+ Admin Systems, Designed Cross-project Component Library, Contributed to Huawei OSS\n\n**Milestones**:\n- 🏆 2022 Huawei DevUI Contributor (Breadcrumb & TreeSelect components adopted by 10+ projects)\n- 🚀 Built enterprise component library boosting 40% dev efficiency, authored《Vue3 Composition API Best Practices》\n- 🔥 2025 Nuxt3 SSR optimization achieving 0.8s LCP (62% improvement)\n\n  </div>\n</div>\n\n<style>\n.bio-container {display: flex; gap: 40px; margin: 2rem 0;}\n.lang-section {flex: 1;}\n.lang-section.cn h3 {color: #2c3e50;}\n.lang-section.en h3 {color: #34495e;}\n@media (max-width: 768px) {\n  .bio-container {flex-direction: column;}\n}\n</style>\n\n🛠️ **技术聚焦 | Tech Focus**\n- WebAssembly性能优化实践 / WebAssembly Performance Optimization\n- NestJS微服务架构 / NestJS Microservices\n- Monorepo工程化方案 / Turborepo Monorepo Solutions\n\n🌱 **成长之道 | Growth Philosophy**\n- **技术纵深**：年投入300+h刻意练习，系统补足CS核心知识 / Annual 300+h deliberate practice on CS fundamentals\n- **跨界融合**：在职考研锻造高效时间管理 / Enhanced time management through part-time grad prep\n- **思维升级**：普拉提教学实践启发技术架构设计 / Pilates teaching inspires systematic technical design\n\n🎹 **生活维度 | Life Palette**\n- 钢琴15年演奏 / 15 years of piano performance experience\n- 北极星普拉提认证（备考中）/ Polestar Pilates Certification (In-Progress)\n- 2024书单：《马斯克传》《超越百岁》《我在北京送快递》/ 2024 Reads: Elon Musk, Outlive, Delivery Diaries\n\n📮 **Connect | 期待交流**  \n[GitHub](https://github.com/angelanana) | [掘金](https://juejin.cn/user/2463372060667735) | [X](https://x.com/angelanana17894)\n*\"Stay hungry, stay foolish. 在比特与字节的世界，我们永远都是新生\"*  \n*\"Stay hungry, stay foolish. In the realm of bits and bytes, we remain perpetual learners.\"*","source":"_posts/me.md","raw":"---\ntitle: Angelanana | Full-stack Explorer\ndate: 2025-01-03 15:46:16\ntags:\n  - Frontend Development\n  - Vue Ecosystem\n  - Open Source\n  - Tech Growth\n---\n\n<div class=\"bio-container\">\n  <div class=\"lang-section cn\">\n  \n### 👩💻 技术轨迹\n**全栈工程师** | **开源贡献者** | **终身学习者**\n\n**2020-2025** 前端领域深度实践者：\n- **核心领域**：Vue2/3全栈方案、Nuxt服务端渲染、Electron桌面开发\n- **技术生态**：NestJS企业级框架、Node中间件开发、Webpack/Vite工程化体系\n- **架构实践**：主导5+中后台系统，设计跨项目组件库，参与华为开源组件开发\n\n**技术里程碑**：\n- 🏆 2022年华为DevUI开源贡献者，主导面包屑导航、树形选择组件开发（10+项目采用）\n- 🚀 构建企业级组件库架构，开发效率提升40%，编制《Vue3组合式API最佳实践》\n- 🔥 2025年完成Nuxt3项目重构，首屏性能优化至LCP 0.8s（下降62%）\n\n  </div>\n\n  <div class=\"lang-section en\">\n\n### 👩💻 Tech Odyssey\n**Full-stack Engineer** | **OSS Contributor** | **Lifelong Learner**\n\n**2020-2025** Frontend Specialist:\n- **Core Stack**: Vue2/3 Full Solutions, Nuxt SSR, Electron Desktop Dev\n- **Tech Ecosystem**: NestJS Enterprise Framework, Node Middleware, Webpack/Vite Tooling\n- **Architecture**: Led 5+ Admin Systems, Designed Cross-project Component Library, Contributed to Huawei OSS\n\n**Milestones**:\n- 🏆 2022 Huawei DevUI Contributor (Breadcrumb & TreeSelect components adopted by 10+ projects)\n- 🚀 Built enterprise component library boosting 40% dev efficiency, authored《Vue3 Composition API Best Practices》\n- 🔥 2025 Nuxt3 SSR optimization achieving 0.8s LCP (62% improvement)\n\n  </div>\n</div>\n\n<style>\n.bio-container {display: flex; gap: 40px; margin: 2rem 0;}\n.lang-section {flex: 1;}\n.lang-section.cn h3 {color: #2c3e50;}\n.lang-section.en h3 {color: #34495e;}\n@media (max-width: 768px) {\n  .bio-container {flex-direction: column;}\n}\n</style>\n\n🛠️ **技术聚焦 | Tech Focus**\n- WebAssembly性能优化实践 / WebAssembly Performance Optimization\n- NestJS微服务架构 / NestJS Microservices\n- Monorepo工程化方案 / Turborepo Monorepo Solutions\n\n🌱 **成长之道 | Growth Philosophy**\n- **技术纵深**：年投入300+h刻意练习，系统补足CS核心知识 / Annual 300+h deliberate practice on CS fundamentals\n- **跨界融合**：在职考研锻造高效时间管理 / Enhanced time management through part-time grad prep\n- **思维升级**：普拉提教学实践启发技术架构设计 / Pilates teaching inspires systematic technical design\n\n🎹 **生活维度 | Life Palette**\n- 钢琴15年演奏 / 15 years of piano performance experience\n- 北极星普拉提认证（备考中）/ Polestar Pilates Certification (In-Progress)\n- 2024书单：《马斯克传》《超越百岁》《我在北京送快递》/ 2024 Reads: Elon Musk, Outlive, Delivery Diaries\n\n📮 **Connect | 期待交流**  \n[GitHub](https://github.com/angelanana) | [掘金](https://juejin.cn/user/2463372060667735) | [X](https://x.com/angelanana17894)\n*\"Stay hungry, stay foolish. 在比特与字节的世界，我们永远都是新生\"*  \n*\"Stay hungry, stay foolish. In the realm of bits and bytes, we remain perpetual learners.\"*","slug":"me","published":1,"updated":"2025-04-01T07:02:30.491Z","comments":1,"layout":"post","photos":[],"_id":"cm8zreux90004sm1y8x1e5ztt","content":"<div class=\"bio-container\">\n  <div class=\"lang-section cn\">\n  \n<h3 id=\"👩💻-技术轨迹\"><a href=\"#👩💻-技术轨迹\" class=\"headerlink\" title=\"👩💻 技术轨迹\"></a>👩💻 技术轨迹</h3><p><strong>全栈工程师</strong> | <strong>开源贡献者</strong> | <strong>终身学习者</strong></p>\n<p><strong>2020-2025</strong> 前端领域深度实践者：</p>\n<ul>\n<li><strong>核心领域</strong>：Vue2&#x2F;3全栈方案、Nuxt服务端渲染、Electron桌面开发</li>\n<li><strong>技术生态</strong>：NestJS企业级框架、Node中间件开发、Webpack&#x2F;Vite工程化体系</li>\n<li><strong>架构实践</strong>：主导5+中后台系统，设计跨项目组件库，参与华为开源组件开发</li>\n</ul>\n<p><strong>技术里程碑</strong>：</p>\n<ul>\n<li><p>🏆 2022年华为DevUI开源贡献者，主导面包屑导航、树形选择组件开发（10+项目采用）</p>\n</li>\n<li><p>🚀 构建企业级组件库架构，开发效率提升40%，编制《Vue3组合式API最佳实践》</p>\n</li>\n<li><p>🔥 2025年完成Nuxt3项目重构，首屏性能优化至LCP 0.8s（下降62%）</p>\n</div>\n\n<div class=\"lang-section en\"></li>\n</ul>\n<h3 id=\"👩💻-Tech-Odyssey\"><a href=\"#👩💻-Tech-Odyssey\" class=\"headerlink\" title=\"👩💻 Tech Odyssey\"></a>👩💻 Tech Odyssey</h3><p><strong>Full-stack Engineer</strong> | <strong>OSS Contributor</strong> | <strong>Lifelong Learner</strong></p>\n<p><strong>2020-2025</strong> Frontend Specialist:</p>\n<ul>\n<li><strong>Core Stack</strong>: Vue2&#x2F;3 Full Solutions, Nuxt SSR, Electron Desktop Dev</li>\n<li><strong>Tech Ecosystem</strong>: NestJS Enterprise Framework, Node Middleware, Webpack&#x2F;Vite Tooling</li>\n<li><strong>Architecture</strong>: Led 5+ Admin Systems, Designed Cross-project Component Library, Contributed to Huawei OSS</li>\n</ul>\n<p><strong>Milestones</strong>:</p>\n<ul>\n<li><p>🏆 2022 Huawei DevUI Contributor (Breadcrumb &amp; TreeSelect components adopted by 10+ projects)</p>\n</li>\n<li><p>🚀 Built enterprise component library boosting 40% dev efficiency, authored《Vue3 Composition API Best Practices》</p>\n</li>\n<li><p>🔥 2025 Nuxt3 SSR optimization achieving 0.8s LCP (62% improvement)</p>\n</div></li>\n</ul>\n</div>\n\n<style>\n.bio-container {display: flex; gap: 40px; margin: 2rem 0;}\n.lang-section {flex: 1;}\n.lang-section.cn h3 {color: #2c3e50;}\n.lang-section.en h3 {color: #34495e;}\n@media (max-width: 768px) {\n  .bio-container {flex-direction: column;}\n}\n</style>\n\n<p>🛠️ <strong>技术聚焦 | Tech Focus</strong></p>\n<ul>\n<li>WebAssembly性能优化实践 &#x2F; WebAssembly Performance Optimization</li>\n<li>NestJS微服务架构 &#x2F; NestJS Microservices</li>\n<li>Monorepo工程化方案 &#x2F; Turborepo Monorepo Solutions</li>\n</ul>\n<p>🌱 <strong>成长之道 | Growth Philosophy</strong></p>\n<ul>\n<li><strong>技术纵深</strong>：年投入300+h刻意练习，系统补足CS核心知识 &#x2F; Annual 300+h deliberate practice on CS fundamentals</li>\n<li><strong>跨界融合</strong>：在职考研锻造高效时间管理 &#x2F; Enhanced time management through part-time grad prep</li>\n<li><strong>思维升级</strong>：普拉提教学实践启发技术架构设计 &#x2F; Pilates teaching inspires systematic technical design</li>\n</ul>\n<p>🎹 <strong>生活维度 | Life Palette</strong></p>\n<ul>\n<li>钢琴15年演奏 &#x2F; 15 years of piano performance experience</li>\n<li>北极星普拉提认证（备考中）&#x2F; Polestar Pilates Certification (In-Progress)</li>\n<li>2024书单：《马斯克传》《超越百岁》《我在北京送快递》&#x2F; 2024 Reads: Elon Musk, Outlive, Delivery Diaries</li>\n</ul>\n<p>📮 <strong>Connect | 期待交流</strong><br><a href=\"https://github.com/angelanana\">GitHub</a> | <a href=\"https://juejin.cn/user/2463372060667735\">掘金</a> | <a href=\"https://x.com/angelanana17894\">X</a><br><em>“Stay hungry, stay foolish. 在比特与字节的世界，我们永远都是新生”</em><br><em>“Stay hungry, stay foolish. In the realm of bits and bytes, we remain perpetual learners.”</em></p>\n","excerpt":"","more":"<div class=\"bio-container\">\n  <div class=\"lang-section cn\">\n  \n<h3 id=\"👩💻-技术轨迹\"><a href=\"#👩💻-技术轨迹\" class=\"headerlink\" title=\"👩💻 技术轨迹\"></a>👩💻 技术轨迹</h3><p><strong>全栈工程师</strong> | <strong>开源贡献者</strong> | <strong>终身学习者</strong></p>\n<p><strong>2020-2025</strong> 前端领域深度实践者：</p>\n<ul>\n<li><strong>核心领域</strong>：Vue2&#x2F;3全栈方案、Nuxt服务端渲染、Electron桌面开发</li>\n<li><strong>技术生态</strong>：NestJS企业级框架、Node中间件开发、Webpack&#x2F;Vite工程化体系</li>\n<li><strong>架构实践</strong>：主导5+中后台系统，设计跨项目组件库，参与华为开源组件开发</li>\n</ul>\n<p><strong>技术里程碑</strong>：</p>\n<ul>\n<li><p>🏆 2022年华为DevUI开源贡献者，主导面包屑导航、树形选择组件开发（10+项目采用）</p>\n</li>\n<li><p>🚀 构建企业级组件库架构，开发效率提升40%，编制《Vue3组合式API最佳实践》</p>\n</li>\n<li><p>🔥 2025年完成Nuxt3项目重构，首屏性能优化至LCP 0.8s（下降62%）</p>\n</div>\n\n<div class=\"lang-section en\"></li>\n</ul>\n<h3 id=\"👩💻-Tech-Odyssey\"><a href=\"#👩💻-Tech-Odyssey\" class=\"headerlink\" title=\"👩💻 Tech Odyssey\"></a>👩💻 Tech Odyssey</h3><p><strong>Full-stack Engineer</strong> | <strong>OSS Contributor</strong> | <strong>Lifelong Learner</strong></p>\n<p><strong>2020-2025</strong> Frontend Specialist:</p>\n<ul>\n<li><strong>Core Stack</strong>: Vue2&#x2F;3 Full Solutions, Nuxt SSR, Electron Desktop Dev</li>\n<li><strong>Tech Ecosystem</strong>: NestJS Enterprise Framework, Node Middleware, Webpack&#x2F;Vite Tooling</li>\n<li><strong>Architecture</strong>: Led 5+ Admin Systems, Designed Cross-project Component Library, Contributed to Huawei OSS</li>\n</ul>\n<p><strong>Milestones</strong>:</p>\n<ul>\n<li><p>🏆 2022 Huawei DevUI Contributor (Breadcrumb &amp; TreeSelect components adopted by 10+ projects)</p>\n</li>\n<li><p>🚀 Built enterprise component library boosting 40% dev efficiency, authored《Vue3 Composition API Best Practices》</p>\n</li>\n<li><p>🔥 2025 Nuxt3 SSR optimization achieving 0.8s LCP (62% improvement)</p>\n</div></li>\n</ul>\n</div>\n\n<style>\n.bio-container {display: flex; gap: 40px; margin: 2rem 0;}\n.lang-section {flex: 1;}\n.lang-section.cn h3 {color: #2c3e50;}\n.lang-section.en h3 {color: #34495e;}\n@media (max-width: 768px) {\n  .bio-container {flex-direction: column;}\n}\n</style>\n\n<p>🛠️ <strong>技术聚焦 | Tech Focus</strong></p>\n<ul>\n<li>WebAssembly性能优化实践 &#x2F; WebAssembly Performance Optimization</li>\n<li>NestJS微服务架构 &#x2F; NestJS Microservices</li>\n<li>Monorepo工程化方案 &#x2F; Turborepo Monorepo Solutions</li>\n</ul>\n<p>🌱 <strong>成长之道 | Growth Philosophy</strong></p>\n<ul>\n<li><strong>技术纵深</strong>：年投入300+h刻意练习，系统补足CS核心知识 &#x2F; Annual 300+h deliberate practice on CS fundamentals</li>\n<li><strong>跨界融合</strong>：在职考研锻造高效时间管理 &#x2F; Enhanced time management through part-time grad prep</li>\n<li><strong>思维升级</strong>：普拉提教学实践启发技术架构设计 &#x2F; Pilates teaching inspires systematic technical design</li>\n</ul>\n<p>🎹 <strong>生活维度 | Life Palette</strong></p>\n<ul>\n<li>钢琴15年演奏 &#x2F; 15 years of piano performance experience</li>\n<li>北极星普拉提认证（备考中）&#x2F; Polestar Pilates Certification (In-Progress)</li>\n<li>2024书单：《马斯克传》《超越百岁》《我在北京送快递》&#x2F; 2024 Reads: Elon Musk, Outlive, Delivery Diaries</li>\n</ul>\n<p>📮 <strong>Connect | 期待交流</strong><br><a href=\"https://github.com/angelanana\">GitHub</a> | <a href=\"https://juejin.cn/user/2463372060667735\">掘金</a> | <a href=\"https://x.com/angelanana17894\">X</a><br><em>“Stay hungry, stay foolish. 在比特与字节的世界，我们永远都是新生”</em><br><em>“Stay hungry, stay foolish. In the realm of bits and bytes, we remain perpetual learners.”</em></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cm8zreux90004sm1y8x1e5ztt","tag_id":"cm8zreux90005sm1ycqctdfjn","_id":"cm8zreuxa0009sm1y0w5tg3s7"},{"post_id":"cm8zreux90004sm1y8x1e5ztt","tag_id":"cm8zreuxa0006sm1yggnzcvyg","_id":"cm8zreuxa000asm1yfww20zwg"},{"post_id":"cm8zreux90004sm1y8x1e5ztt","tag_id":"cm8zreuxa0007sm1ygz2m9y6b","_id":"cm8zreuxa000bsm1y3ag78bhp"},{"post_id":"cm8zreux90004sm1y8x1e5ztt","tag_id":"cm8zreuxa0008sm1y8fxl6oo3","_id":"cm8zreuxb000csm1y7ycnclqi"}],"Tag":[{"name":"Frontend Development","_id":"cm8zreux90005sm1ycqctdfjn"},{"name":"Vue Ecosystem","_id":"cm8zreuxa0006sm1yggnzcvyg"},{"name":"Open Source","_id":"cm8zreuxa0007sm1ygz2m9y6b"},{"name":"Tech Growth","_id":"cm8zreuxa0008sm1y8fxl6oo3"}]}}